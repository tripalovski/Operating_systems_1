GAS LISTING /tmp/ccuwPHk3.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   8              	_ZL24updateSemTimeBlockedListv:
   9              	.LFB90:
  10              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** #include "../h/print.hpp"
   2:src/riscv.cpp **** 
   3:src/riscv.cpp **** #include "../h/riscv.hpp"
   4:src/riscv.cpp **** #include "../h/tcb.hpp"
   5:src/riscv.cpp **** #include "../lib/console.h"
   6:src/riscv.cpp **** #include "../h/memoryAllocator.hpp"
   7:src/riscv.cpp **** #include "../h/sem.hpp"
   8:src/riscv.cpp **** #include "../h/myConsole.hpp"
   9:src/riscv.cpp **** #include "../test/printing.hpp"
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** static void updateSemTimeBlockedList() {
  11              		.loc 1 11 40
  12              		.cfi_startproc
  13 0000 130101FE 		addi	sp,sp,-32
  14              		.cfi_def_cfa_offset 32
  15 0004 233C1100 		sd	ra,24(sp)
  16 0008 23388100 		sd	s0,16(sp)
  17 000c 23349100 		sd	s1,8(sp)
  18 0010 23302101 		sd	s2,0(sp)
  19              		.cfi_offset 1, -8
  20              		.cfi_offset 8, -16
  21              		.cfi_offset 9, -24
  22              		.cfi_offset 18, -32
  23 0014 13040102 		addi	s0,sp,32
  24              		.cfi_def_cfa 8, 0
  12:src/riscv.cpp ****     Elem* current = sem::timeBlockedQueue;
  25              		.loc 1 12 5
  26              		.loc 1 12 11 is_stmt 0
  27 0018 97070000 		la	a5,_ZN3sem16timeBlockedQueueE
  27      83B70700 
  28 0020 83B40700 		ld	s1,0(a5)
  29              	.LVL0:
  13:src/riscv.cpp ****     if(current)    current->timeLeft--;
  30              		.loc 1 13 5 is_stmt 1
  31 0024 638C0400 		beqz	s1,.L5
  32              		.loc 1 13 20 discriminator 1
  33              		.loc 1 13 29 is_stmt 0 discriminator 1
  34 0028 83B78400 		ld	a5,8(s1)
  35              		.loc 1 13 37 discriminator 1
  36 002c 9387F7FF 		addi	a5,a5,-1
  37 0030 23B4F400 		sd	a5,8(s1)
  38 0034 6F008000 		j	.L5
  39              	.LVL1:
  40              	.L6:
  11:src/riscv.cpp ****     Elem* current = sem::timeBlockedQueue;
  41              		.loc 1 11 40
  42 0038 93040900 		mv	s1,s2
  43              	.LVL2:
GAS LISTING /tmp/ccuwPHk3.s 			page 2


  44              	.L5:
  14:src/riscv.cpp **** 
  15:src/riscv.cpp ****     // ako prvi elem ima timeleft = 0, izbaci njega i sve koji imaju relativno vreme 0 u odnosu na 
  16:src/riscv.cpp ****     while (current) {
  45              		.loc 1 16 5 is_stmt 1
  46              		.loc 1 16 12
  47 003c 63860404 		beqz	s1,.L1
  17:src/riscv.cpp ****         if (current->timeLeft <= 0) {
  48              		.loc 1 17 9
  49              	.LBB60:
  50              		.loc 1 17 22 is_stmt 0
  51 0040 83B78400 		ld	a5,8(s1)
  52              		.loc 1 17 9
  53 0044 E39C07FE 		bnez	a5,.L5
  54              	.LBB61:
  18:src/riscv.cpp ****             Elem* temp = current;
  55              		.loc 1 18 13 is_stmt 1
  56              	.LVL3:
  19:src/riscv.cpp ****             temp->tcb->setBlocked(false);
  57              		.loc 1 19 13
  58              		.loc 1 19 34 is_stmt 0
  59 0048 93050000 		li	a1,0
  60 004c 03B50400 		ld	a0,0(s1)
  61 0050 97000000 		call	_ZN3TCB10setBlockedEb@plt
  61      E7800000 
  62              	.LVL4:
  20:src/riscv.cpp ****             Scheduler::put(temp->tcb);
  63              		.loc 1 20 13 is_stmt 1
  64              		.loc 1 20 27 is_stmt 0
  65 0058 03B50400 		ld	a0,0(s1)
  66 005c 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
  66      E7800000 
  67              	.LVL5:
  21:src/riscv.cpp ****             sem::timeBlockedQueue = current->next;
  68              		.loc 1 21 13 is_stmt 1
  69              		.loc 1 21 46 is_stmt 0
  70 0064 03B90401 		ld	s2,16(s1)
  71              		.loc 1 21 35
  72 0068 97070000 		la	a5,_ZN3sem16timeBlockedQueueE
  72      83B70700 
  73 0070 23B02701 		sd	s2,0(a5)
  22:src/riscv.cpp **** 
  23:src/riscv.cpp ****             current = current->next; // Pređi na sledeći čvor
  74              		.loc 1 23 13 is_stmt 1
  75              	.LVL6:
  24:src/riscv.cpp ****             delete temp; // Oslobodi memoriju za uklonjeni čvor
  76              		.loc 1 24 13
  77              		.loc 1 24 24 is_stmt 0
  78 0074 E38204FC 		beqz	s1,.L6
  79              		.loc 1 24 20 discriminator 1
  80 0078 13850400 		mv	a0,s1
  81 007c 97000000 		call	_ZdlPv@plt
  81      E7800000 
  82              	.LVL7:
  83 0084 6FF05FFB 		j	.L6
  84              	.LVL8:
  85              	.L1:
GAS LISTING /tmp/ccuwPHk3.s 			page 3


  86              	.LBE61:
  87              	.LBE60:
  25:src/riscv.cpp ****         }
  26:src/riscv.cpp ****     }
  27:src/riscv.cpp **** }
  88              		.loc 1 27 1
  89 0088 83308101 		ld	ra,24(sp)
  90              		.cfi_restore 1
  91 008c 03340101 		ld	s0,16(sp)
  92              		.cfi_restore 8
  93              		.cfi_def_cfa 2, 32
  94 0090 83348100 		ld	s1,8(sp)
  95              		.cfi_restore 9
  96              	.LVL9:
  97 0094 03390100 		ld	s2,0(sp)
  98              		.cfi_restore 18
  99 0098 13010102 		addi	sp,sp,32
 100              		.cfi_def_cfa_offset 0
 101 009c 67800000 		jr	ra
 102              		.cfi_endproc
 103              	.LFE90:
 105              		.align	2
 106              		.globl	_ZN5Riscv10popSppSpieEv
 108              	_ZN5Riscv10popSppSpieEv:
 109              	.LFB91:
  28:src/riscv.cpp **** 
  29:src/riscv.cpp **** void Riscv::popSppSpie()
  30:src/riscv.cpp **** {
 110              		.loc 1 30 1 is_stmt 1
 111              		.cfi_startproc
 112 00a0 130101FF 		addi	sp,sp,-16
 113              		.cfi_def_cfa_offset 16
 114 00a4 23348100 		sd	s0,8(sp)
 115              		.cfi_offset 8, -8
 116 00a8 13040101 		addi	s0,sp,16
 117              		.cfi_def_cfa 8, 0
  31:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
 118              		.loc 1 31 5
 119              		.loc 1 31 38 is_stmt 0
 120              	#APP
 121              	# 31 "src/riscv.cpp" 1
  32              	    __asm__ volatile("sret");
 122              		csrw sepc, ra
 123              	# 0 "" 2
 124              		.loc 1 32 5 is_stmt 1
 125              		.loc 1 32 29 is_stmt 0
 126              	# 32 "src/riscv.cpp" 1
  33              	}
 127              		sret
 128              	# 0 "" 2
 129              		.loc 1 33 1
 130              	#NO_APP
 131 00b4 03348100 		ld	s0,8(sp)
 132              		.cfi_restore 8
 133              		.cfi_def_cfa 2, 16
 134 00b8 13010101 		addi	sp,sp,16
 135              		.cfi_def_cfa_offset 0
GAS LISTING /tmp/ccuwPHk3.s 			page 4


 136 00bc 67800000 		jr	ra
 137              		.cfi_endproc
 138              	.LFE91:
 140              		.section	.rodata.str1.8,"aMS",@progbits,1
 141              		.align	3
 142              	.LC0:
 143 0000 73636175 		.string	"scause: "
 143      73653A20 
 143      00
 144 0009 00000000 		.align	3
 144      000000
 145              	.LC1:
 146 0010 0A00     		.string	"\n"
 147 0012 00000000 		.align	3
 147      0000
 148              	.LC2:
 149 0018 73657063 		.string	"sepc: "
 149      3A2000
 150              		.text
 151              		.align	2
 152              		.globl	_ZN5Riscv20handleSupervisorTrapEv
 154              	_ZN5Riscv20handleSupervisorTrapEv:
 155              	.LFB92:
  34:src/riscv.cpp **** 
  35:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  36:src/riscv.cpp **** {
 156              		.loc 1 36 1 is_stmt 1
 157              		.cfi_startproc
 158 00c0 130101F7 		addi	sp,sp,-144
 159              		.cfi_def_cfa_offset 144
 160 00c4 23341108 		sd	ra,136(sp)
 161 00c8 23308108 		sd	s0,128(sp)
 162 00cc 233C9106 		sd	s1,120(sp)
 163 00d0 23382107 		sd	s2,112(sp)
 164 00d4 23343107 		sd	s3,104(sp)
 165              		.cfi_offset 1, -8
 166              		.cfi_offset 8, -16
 167              		.cfi_offset 9, -24
 168              		.cfi_offset 18, -32
 169              		.cfi_offset 19, -40
 170 00d8 13040109 		addi	s0,sp,144
 171              		.cfi_def_cfa 8, 0
  37:src/riscv.cpp ****     uint64 scause = r_scause();
 172              		.loc 1 37 5
 173              	.LBB62:
 174              	.LBB63:
 175              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   2:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   3:src/../h/riscv.hpp **** 
   4:src/../h/riscv.hpp **** #include "../lib/hw.h"
   5:src/../h/riscv.hpp **** 
   6:src/../h/riscv.hpp **** class Riscv
   7:src/../h/riscv.hpp **** {
   8:src/../h/riscv.hpp **** public:
   9:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  10:src/../h/riscv.hpp ****     static void pushRegisters();
GAS LISTING /tmp/ccuwPHk3.s 			page 5


  11:src/../h/riscv.hpp **** 
  12:src/../h/riscv.hpp ****     //pop x3..x31 registers from stack
  13:src/../h/riscv.hpp ****     static void popRegisters();
  14:src/../h/riscv.hpp **** 
  15:src/../h/riscv.hpp ****     static void popSppSpie();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // read register scause
  18:src/../h/riscv.hpp ****     static uint64 r_scause();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // write register scause
  21:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // read register sepc
  24:src/../h/riscv.hpp ****     static uint64 r_sepc();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // write register sepc
  27:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // read register stvec
  30:src/../h/riscv.hpp ****     static uint64 r_stvec();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // write register stvec
  33:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register stval
  36:src/../h/riscv.hpp ****     static uint64 r_stval();
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register stval
  39:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     enum BitMaskSip
  42:src/../h/riscv.hpp ****     {
  43:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  44:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  45:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  46:src/../h/riscv.hpp ****     };
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // mask set register sip
  49:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask clear register sip
  52:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // read register sip
  55:src/../h/riscv.hpp ****     static uint64 r_sip();
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // write register sip
  58:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     enum BitMaskSstatus
  61:src/../h/riscv.hpp ****     {
  62:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  63:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  64:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  65:src/../h/riscv.hpp ****     };
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask set register sstatus
GAS LISTING /tmp/ccuwPHk3.s 			page 6


  68:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask clear register sstatus
  71:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // read register sstatus
  74:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // write register sstatus
  77:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // supervisor trap
  80:src/../h/riscv.hpp ****     static void supervisorTrap();
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp **** private:
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp ****     // supervisor trap handler
  85:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp **** };
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  90:src/../h/riscv.hpp **** {
  91:src/../h/riscv.hpp ****     uint64 volatile scause;
 176              		.loc 2 91 5
  92:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 177              		.loc 2 92 5
 178              		.loc 2 92 72 is_stmt 0
 179              	#APP
 180              	# 92 "src/../h/riscv.hpp" 1
  93              	    return scause;
 181              		csrr a5, scause
 182              	# 0 "" 2
 183              	#NO_APP
 184 00e0 2338F4F8 		sd	a5,-112(s0)
 185              		.loc 2 93 5 is_stmt 1
 186              		.loc 2 93 12 is_stmt 0
 187 00e4 833404F9 		ld	s1,-112(s0)
 188              	.LVL10:
 189              	.LBE63:
 190              	.LBE62:
  38:src/riscv.cpp **** 
  39:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
 191              		.loc 1 39 5 is_stmt 1
 192              	.LBB64:
 193              		.loc 1 39 40 is_stmt 0
 194 00e8 138784FF 		addi	a4,s1,-8
 195              		.loc 1 39 5
 196 00ec 93071000 		li	a5,1
 197 00f0 63F6E708 		bleu	a4,a5,.L40
 198              	.LBE64:
  40:src/riscv.cpp ****     {
  41:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  42:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
  43:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  44:src/riscv.cpp **** 
  45:src/riscv.cpp ****         uint64 code;
GAS LISTING /tmp/ccuwPHk3.s 			page 7


  46:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r"(code));
  47:src/riscv.cpp **** 
  48:src/riscv.cpp **** 
  49:src/riscv.cpp ****         void* ptr;
  50:src/riscv.cpp ****         int res;
  51:src/riscv.cpp ****         sem* id;
  52:src/riscv.cpp ****         char c;
  53:src/riscv.cpp ****         switch (code) {
  54:src/riscv.cpp ****             case 0x01: // mem_alloc
  55:src/riscv.cpp ****                 size_t size; // amount of blocks
  56:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(size));
  57:src/riscv.cpp ****                 ptr = MemoryAllocator::mem_alloc(size);
  58:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(ptr));
  59:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
  60:src/riscv.cpp ****                 break;
  61:src/riscv.cpp ****             case 0x02: //mem_free
  62:src/riscv.cpp ****                 void* freePtr;
  63:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(freePtr));
  64:src/riscv.cpp ****                 res = MemoryAllocator::mem_free(freePtr);
  65:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
  66:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
  67:src/riscv.cpp ****                 break;
  68:src/riscv.cpp ****             case 0x11: // thread create
  69:src/riscv.cpp ****                 TCB** handle;
  70:src/riscv.cpp ****                 void (*start_routine)(void*);
  71:src/riscv.cpp ****                 void* arg;
  72:src/riscv.cpp ****                 void* stack_space;
  73:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (handle));
  74:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2" : "=r" (start_routine));
  75:src/riscv.cpp ****                 __asm__ volatile("mv %0, a3" : "=r" (arg));
  76:src/riscv.cpp ****                 __asm__ volatile("ld %0, 8*14(s0)" :  "=r" (stack_space));
  77:src/riscv.cpp ****                 res = TCB::createThread(handle, start_routine, arg, stack_space);
  78:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
  79:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
  80:src/riscv.cpp ****                 break;
  81:src/riscv.cpp ****                 case 0x12: // thread exit
  82:src/riscv.cpp ****                 res = TCB::thread_exit();
  83:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
  84:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
  85:src/riscv.cpp ****                 break;
  86:src/riscv.cpp ****             case 0x13:
  87:src/riscv.cpp ****                 TCB::dispatch();
  88:src/riscv.cpp ****                 break;
  89:src/riscv.cpp ****             case 0x21: // sem open XXX
  90:src/riscv.cpp ****                 sem** semHandle;
  91:src/riscv.cpp ****                 int init;
  92:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (semHandle));
  93:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2" : "=r" (init));
  94:src/riscv.cpp ****                 sem *semaphore;
  95:src/riscv.cpp ****                 semaphore = new sem(init, semHandle);
  96:src/riscv.cpp ****                 if(!semaphore){
  97:src/riscv.cpp ****                     res = -1;
  98:src/riscv.cpp ****                 }else{
  99:src/riscv.cpp ****                     *(semHandle) = semaphore;
 100:src/riscv.cpp ****                     res = 0;
 101:src/riscv.cpp ****                 }
 102:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
GAS LISTING /tmp/ccuwPHk3.s 			page 8


 103:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 104:src/riscv.cpp ****                 break;
 105:src/riscv.cpp ****             case 0x22: // sem close
 106:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (id));
 107:src/riscv.cpp ****                 if(!id){
 108:src/riscv.cpp ****                     res = -1;
 109:src/riscv.cpp ****                 }else{
 110:src/riscv.cpp ****                     delete id;
 111:src/riscv.cpp ****                     res = 0;
 112:src/riscv.cpp ****                 }
 113:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 114:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 115:src/riscv.cpp ****                 break;
 116:src/riscv.cpp ****             case 0x23: // sem wait xxx
 117:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (id));
 118:src/riscv.cpp ****                 res = id->wait();
 119:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 120:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 121:src/riscv.cpp ****                 break;
 122:src/riscv.cpp ****             case 0x24: // sem signal xxx
 123:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (id));
 124:src/riscv.cpp ****                 res = id->signal();
 125:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 126:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 127:src/riscv.cpp ****                 break;
 128:src/riscv.cpp ****             case 0x25: // sem timedwait xxx
 129:src/riscv.cpp ****                 time_t timeout;
 130:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (id));
 131:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2" : "=r" (timeout));
 132:src/riscv.cpp ****                 res = id->timedWait(timeout);
 133:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 134:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 135:src/riscv.cpp ****                 break;
 136:src/riscv.cpp ****             case 0x26: // sem tryWait xxx
 137:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (id));
 138:src/riscv.cpp ****                 res = id->tryWait();
 139:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 140:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 141:src/riscv.cpp ****                 break;
 142:src/riscv.cpp ****             case 0x31: // time sleep
 143:src/riscv.cpp ****                 time_t sleep_time;
 144:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (sleep_time));
 145:src/riscv.cpp ****                 res = TCB::putToSleep(sleep_time);
 146:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 147:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 148:src/riscv.cpp ****                 break;
 149:src/riscv.cpp ****             case 0x41: // getc
 150:src/riscv.cpp ****                 c = myConsole::getc();
 151:src/riscv.cpp ****                 if(!c) c = EOF;
 152:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(c));
 153:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 154:src/riscv.cpp ****                 break;
 155:src/riscv.cpp ****             case 0x42: // putc
 156:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (c));
 157:src/riscv.cpp ****                 myConsole::putc(c);
 158:src/riscv.cpp ****                 break;
 159:src/riscv.cpp ****         }
GAS LISTING /tmp/ccuwPHk3.s 			page 9


 160:src/riscv.cpp **** 
 161:src/riscv.cpp ****         w_sstatus(sstatus);
 162:src/riscv.cpp ****         w_sepc(sepc);
 163:src/riscv.cpp **** 
 164:src/riscv.cpp ****     }
 165:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
 199              		.loc 1 165 10 is_stmt 1
 200              	.LBB121:
 201              	.LBB65:
 202 00f4 9307F0FF 		li	a5,-1
 203 00f8 9397F703 		slli	a5,a5,63
 204 00fc 93871700 		addi	a5,a5,1
 205 0100 638AF42A 		beq	s1,a5,.L41
 206              	.LBE65:
 207              	.LBE121:
 166:src/riscv.cpp ****     {
 167:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 168:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 169:src/riscv.cpp ****         updateSemTimeBlockedList();
 170:src/riscv.cpp ****         TCB::updateSleepingThreads();
 171:src/riscv.cpp **** 
 172:src/riscv.cpp ****         TCB::timeSliceCounter++;
 173:src/riscv.cpp ****         uint64 time  = TCB::running->getTimeSlice();
 174:src/riscv.cpp ****         if (TCB::timeSliceCounter >= time)
 175:src/riscv.cpp ****         {
 176:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 177:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 178:src/riscv.cpp ****             TCB::dispatch();
 179:src/riscv.cpp ****             w_sstatus(sstatus);
 180:src/riscv.cpp ****             w_sepc(sepc);
 181:src/riscv.cpp ****         }
 182:src/riscv.cpp ****     }
 183:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
 208              		.loc 1 183 10
 209              	.LBB122:
 210              	.LBB99:
 211              	.LBB66:
 212 0104 9307F0FF 		li	a5,-1
 213 0108 9397F703 		slli	a5,a5,63
 214 010c 93879700 		addi	a5,a5,9
 215 0110 6380F432 		beq	s1,a5,.L42
 216              	.LBB67:
 184:src/riscv.cpp ****     {
 185:src/riscv.cpp ****         // console handler
 186:src/riscv.cpp ****         uint64 sepc = r_sepc();
 187:src/riscv.cpp ****         uint64 sstatus = r_sstatus();
 188:src/riscv.cpp ****         if (plic_claim() == 0x0a){
 189:src/riscv.cpp ****             char status = *(char*)CONSOLE_STATUS;
 190:src/riscv.cpp ****             while (CONSOLE_RX_STATUS_BIT & status){
 191:src/riscv.cpp ****                 char ch = *(char*) CONSOLE_RX_DATA;
 192:src/riscv.cpp ****                 myConsole::recieveFromKeyboard(ch);
 193:src/riscv.cpp ****                 status = *(char*)CONSOLE_STATUS;
 194:src/riscv.cpp ****             }
 195:src/riscv.cpp ****         }
 196:src/riscv.cpp ****         plic_complete(0x0a);
 197:src/riscv.cpp ****         w_sstatus(sstatus);
 198:src/riscv.cpp ****         w_sepc(sepc);
GAS LISTING /tmp/ccuwPHk3.s 			page 10


 199:src/riscv.cpp ****     }
 200:src/riscv.cpp ****     else
 201:src/riscv.cpp ****     {
 202:src/riscv.cpp ****         uint64 sepc = r_sepc();
 217              		.loc 1 202 9
 218              	.LBB68:
 219              	.LBB69:
  94:src/../h/riscv.hpp **** }
  95:src/../h/riscv.hpp **** 
  96:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
  97:src/../h/riscv.hpp **** {
  98:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
  99:src/../h/riscv.hpp **** }
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 102:src/../h/riscv.hpp **** {
 103:src/../h/riscv.hpp ****     uint64 volatile sepc;
 220              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 221              		.loc 2 104 5
 222              		.loc 2 104 64 is_stmt 0
 223              	#APP
 224              	# 104 "src/../h/riscv.hpp" 1
 105              	    return sepc;
 225              		csrr a5, sepc
 226              	# 0 "" 2
 227              	#NO_APP
 228 0118 2334F4FC 		sd	a5,-56(s0)
 229              		.loc 2 105 5 is_stmt 1
 230              		.loc 2 105 12 is_stmt 0
 231 011c 033984FC 		ld	s2,-56(s0)
 232              	.LVL11:
 233              	.LBE69:
 234              	.LBE68:
 203:src/riscv.cpp **** 
 204:src/riscv.cpp ****         // unexpected trap cause
 205:src/riscv.cpp ****         printStringTrap("scause: ");
 235              		.loc 1 205 9 is_stmt 1
 236              		.loc 1 205 24 is_stmt 0
 237 0120 17050000 		lla	a0,.LC0
 237      13050500 
 238 0128 97000000 		call	_Z15printStringTrapPKc@plt
 238      E7800000 
 239              	.LVL12:
 206:src/riscv.cpp ****         printIntegerTrap(scause);
 240              		.loc 1 206 9 is_stmt 1
 241              		.loc 1 206 25 is_stmt 0
 242 0130 13850400 		mv	a0,s1
 243 0134 97000000 		call	_Z16printIntegerTrapm@plt
 243      E7800000 
 244              	.LVL13:
 207:src/riscv.cpp ****         printStringTrap("\n");
 245              		.loc 1 207 9 is_stmt 1
 246              		.loc 1 207 24 is_stmt 0
 247 013c 17050000 		lla	a0,.LC1
 247      13050500 
 248 0144 97000000 		call	_Z15printStringTrapPKc@plt
GAS LISTING /tmp/ccuwPHk3.s 			page 11


 248      E7800000 
 249              	.LVL14:
 208:src/riscv.cpp **** 
 209:src/riscv.cpp ****         printStringTrap("sepc: ");
 250              		.loc 1 209 9 is_stmt 1
 251              		.loc 1 209 24 is_stmt 0
 252 014c 17050000 		lla	a0,.LC2
 252      13050500 
 253 0154 97000000 		call	_Z15printStringTrapPKc@plt
 253      E7800000 
 254              	.LVL15:
 210:src/riscv.cpp ****         printIntegerTrap(sepc);
 255              		.loc 1 210 9 is_stmt 1
 256              		.loc 1 210 25 is_stmt 0
 257 015c 13050900 		mv	a0,s2
 258 0160 97000000 		call	_Z16printIntegerTrapm@plt
 258      E7800000 
 259              	.LVL16:
 211:src/riscv.cpp ****         printStringTrap("\n");
 260              		.loc 1 211 9 is_stmt 1
 261              		.loc 1 211 24 is_stmt 0
 262 0168 17050000 		lla	a0,.LC1
 262      13050500 
 263 0170 97000000 		call	_Z15printStringTrapPKc@plt
 263      E7800000 
 264              	.LVL17:
 265              	.LBE67:
 266              	.LBE66:
 267              	.LBE99:
 268              	.LBE122:
 212:src/riscv.cpp ****     }
 213:src/riscv.cpp **** }...
 269              		.loc 1 213 1
 270 0178 6F004007 		j	.L10
 271              	.LVL18:
 272              	.L40:
 273              	.LBB123:
 274              	.LBB100:
  42:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 275              		.loc 1 42 9 is_stmt 1
 276              	.LBB101:
 277              	.LBB102:
 103:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 278              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     return sepc;
 279              		.loc 2 104 5
 104:src/../h/riscv.hpp ****     return sepc;
 280              		.loc 2 104 64 is_stmt 0
 281              	#APP
 282              	# 104 "src/../h/riscv.hpp" 1
 283              		csrr a5, sepc
 284              	# 0 "" 2
 285              	#NO_APP
 286 0180 2330F4FA 		sd	a5,-96(s0)
 287              		.loc 2 105 5 is_stmt 1
 288              		.loc 2 105 12 is_stmt 0
 289 0184 833704FA 		ld	a5,-96(s0)
GAS LISTING /tmp/ccuwPHk3.s 			page 12


 290              	.LBE102:
 291              	.LBE101:
  42:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 292              		.loc 1 42 41
 293 0188 93874700 		addi	a5,a5,4
  42:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 294              		.loc 1 42 43
 295 018c 2338F4F6 		sd	a5,-144(s0)
  43:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 296              		.loc 1 43 9 is_stmt 1
 297              	.LBB103:
 298              	.LBB104:
 106:src/../h/riscv.hpp **** }
 107:src/../h/riscv.hpp **** 
 108:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 109:src/../h/riscv.hpp **** {
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 111:src/../h/riscv.hpp **** }
 112:src/../h/riscv.hpp **** 
 113:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 114:src/../h/riscv.hpp **** {
 115:src/../h/riscv.hpp ****     uint64 volatile stvec;
 116:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 117:src/../h/riscv.hpp ****     return stvec;
 118:src/../h/riscv.hpp **** }
 119:src/../h/riscv.hpp **** 
 120:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 121:src/../h/riscv.hpp **** {
 122:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 123:src/../h/riscv.hpp **** }
 124:src/../h/riscv.hpp **** 
 125:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 126:src/../h/riscv.hpp **** {
 127:src/../h/riscv.hpp ****     uint64 volatile stval;
 128:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 129:src/../h/riscv.hpp ****     return stval;
 130:src/../h/riscv.hpp **** }
 131:src/../h/riscv.hpp **** 
 132:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 133:src/../h/riscv.hpp **** {
 134:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 135:src/../h/riscv.hpp **** }
 136:src/../h/riscv.hpp **** 
 137:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 138:src/../h/riscv.hpp **** {
 139:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 140:src/../h/riscv.hpp **** }
 141:src/../h/riscv.hpp **** 
 142:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 143:src/../h/riscv.hpp **** {
 144:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     uint64 volatile sip;
 150:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
GAS LISTING /tmp/ccuwPHk3.s 			page 13


 151:src/../h/riscv.hpp ****     return sip;
 152:src/../h/riscv.hpp **** }
 153:src/../h/riscv.hpp **** 
 154:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 155:src/../h/riscv.hpp **** {
 156:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 157:src/../h/riscv.hpp **** }
 158:src/../h/riscv.hpp **** 
 159:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 160:src/../h/riscv.hpp **** {
 161:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 299              		.loc 2 171 5
 172:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 300              		.loc 2 172 5
 301              		.loc 2 172 76 is_stmt 0
 302              	#APP
 303              	# 172 "src/../h/riscv.hpp" 1
 173              	    return sstatus;
 304              		csrr a5, sstatus
 305              	# 0 "" 2
 306              	#NO_APP
 307 0194 233CF4F8 		sd	a5,-104(s0)
 308              		.loc 2 173 5 is_stmt 1
 309              		.loc 2 173 12 is_stmt 0
 310 0198 833784F9 		ld	a5,-104(s0)
 311              	.LBE104:
 312              	.LBE103:
  43:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 313              		.loc 1 43 45
 314 019c 233CF4F6 		sd	a5,-136(s0)
  45:src/riscv.cpp ****         uint64 code;
 315              		.loc 1 45 9 is_stmt 1
  46:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r"(code));
 316              		.loc 1 46 9
  46:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r"(code));
 317              		.loc 1 46 51 is_stmt 0
 318              	#APP
 319              	# 46 "src/riscv.cpp" 1
 320              		mv a5, a0
 321              	# 0 "" 2
 322              	.LVL19:
  49:src/riscv.cpp ****         void* ptr;
 323              		.loc 1 49 9 is_stmt 1
  50:src/riscv.cpp ****         int res;
 324              		.loc 1 50 9
  51:src/riscv.cpp ****         sem* id;
 325              		.loc 1 51 9
GAS LISTING /tmp/ccuwPHk3.s 			page 14


  52:src/riscv.cpp ****         char c;
 326              		.loc 1 52 9
  53:src/riscv.cpp ****         switch (code) {
 327              		.loc 1 53 9
 328              	#NO_APP
 329 01a4 13072004 		li	a4,66
 330 01a8 636AF702 		bgtu	a5,a4,.L12
 331 01ac 93972700 		slli	a5,a5,2
 332              	.LVL20:
 333 01b0 17070000 		lla	a4,.L14
 333      13070700 
 334 01b8 B387E700 		add	a5,a5,a4
 335 01bc 83A70700 		lw	a5,0(a5)
 336 01c0 B387E700 		add	a5,a5,a4
 337 01c4 67800700 		jr	a5
 338              		.section	.rodata
 339              		.align	2
 340              		.align	2
 341              	.L14:
 342 0000 00000000 		.word	.L12-.L14
 343 0004 00000000 		.word	.L27-.L14
 344 0008 00000000 		.word	.L26-.L14
 345 000c 00000000 		.word	.L12-.L14
 346 0010 00000000 		.word	.L12-.L14
 347 0014 00000000 		.word	.L12-.L14
 348 0018 00000000 		.word	.L12-.L14
 349 001c 00000000 		.word	.L12-.L14
 350 0020 00000000 		.word	.L12-.L14
 351 0024 00000000 		.word	.L12-.L14
 352 0028 00000000 		.word	.L12-.L14
 353 002c 00000000 		.word	.L12-.L14
 354 0030 00000000 		.word	.L12-.L14
 355 0034 00000000 		.word	.L12-.L14
 356 0038 00000000 		.word	.L12-.L14
 357 003c 00000000 		.word	.L12-.L14
 358 0040 00000000 		.word	.L12-.L14
 359 0044 00000000 		.word	.L25-.L14
 360 0048 00000000 		.word	.L24-.L14
 361 004c 00000000 		.word	.L23-.L14
 362 0050 00000000 		.word	.L12-.L14
 363 0054 00000000 		.word	.L12-.L14
 364 0058 00000000 		.word	.L12-.L14
 365 005c 00000000 		.word	.L12-.L14
 366 0060 00000000 		.word	.L12-.L14
 367 0064 00000000 		.word	.L12-.L14
 368 0068 00000000 		.word	.L12-.L14
 369 006c 00000000 		.word	.L12-.L14
 370 0070 00000000 		.word	.L12-.L14
 371 0074 00000000 		.word	.L12-.L14
 372 0078 00000000 		.word	.L12-.L14
 373 007c 00000000 		.word	.L12-.L14
 374 0080 00000000 		.word	.L12-.L14
 375 0084 00000000 		.word	.L22-.L14
 376 0088 00000000 		.word	.L21-.L14
 377 008c 00000000 		.word	.L20-.L14
 378 0090 00000000 		.word	.L19-.L14
 379 0094 00000000 		.word	.L18-.L14
GAS LISTING /tmp/ccuwPHk3.s 			page 15


 380 0098 00000000 		.word	.L17-.L14
 381 009c 00000000 		.word	.L12-.L14
 382 00a0 00000000 		.word	.L12-.L14
 383 00a4 00000000 		.word	.L12-.L14
 384 00a8 00000000 		.word	.L12-.L14
 385 00ac 00000000 		.word	.L12-.L14
 386 00b0 00000000 		.word	.L12-.L14
 387 00b4 00000000 		.word	.L12-.L14
 388 00b8 00000000 		.word	.L12-.L14
 389 00bc 00000000 		.word	.L12-.L14
 390 00c0 00000000 		.word	.L12-.L14
 391 00c4 00000000 		.word	.L16-.L14
 392 00c8 00000000 		.word	.L12-.L14
 393 00cc 00000000 		.word	.L12-.L14
 394 00d0 00000000 		.word	.L12-.L14
 395 00d4 00000000 		.word	.L12-.L14
 396 00d8 00000000 		.word	.L12-.L14
 397 00dc 00000000 		.word	.L12-.L14
 398 00e0 00000000 		.word	.L12-.L14
 399 00e4 00000000 		.word	.L12-.L14
 400 00e8 00000000 		.word	.L12-.L14
 401 00ec 00000000 		.word	.L12-.L14
 402 00f0 00000000 		.word	.L12-.L14
 403 00f4 00000000 		.word	.L12-.L14
 404 00f8 00000000 		.word	.L12-.L14
 405 00fc 00000000 		.word	.L12-.L14
 406 0100 00000000 		.word	.L12-.L14
 407 0104 00000000 		.word	.L15-.L14
 408 0108 00000000 		.word	.L13-.L14
 409              		.text
 410              	.L27:
 411              	.LBB105:
 412              	.LBB106:
  54:src/riscv.cpp ****             case 0x01: // mem_alloc
 413              		.loc 1 54 13
  55:src/riscv.cpp ****                 size_t size; // amount of blocks
 414              		.loc 1 55 17
  56:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(size));
 415              		.loc 1 56 17
  56:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(size));
 416              		.loc 1 56 59 is_stmt 0
 417              	#APP
 418              	# 56 "src/riscv.cpp" 1
 419              		mv a0, a1
 420              	# 0 "" 2
 421              	.LVL21:
  57:src/riscv.cpp ****                 ptr = MemoryAllocator::mem_alloc(size);
 422              		.loc 1 57 17 is_stmt 1
  57:src/riscv.cpp ****                 ptr = MemoryAllocator::mem_alloc(size);
 423              		.loc 1 57 49 is_stmt 0
 424              	#NO_APP
 425 01cc 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 425      E7800000 
 426              	.LVL22:
  58:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(ptr));
 427              		.loc 1 58 17 is_stmt 1
  58:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(ptr));
GAS LISTING /tmp/ccuwPHk3.s 			page 16


 428              		.loc 1 58 59 is_stmt 0
 429              	#APP
 430              	# 58 "src/riscv.cpp" 1
  59:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 431              		mv t0, a0
 432              	# 0 "" 2
 433              		.loc 1 59 17 is_stmt 1
  59:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 434              		.loc 1 59 51 is_stmt 0
 435              	# 59 "src/riscv.cpp" 1
  60:src/riscv.cpp ****                 break;
 436              		sd t0, 80(s0)
 437              	# 0 "" 2
 438              		.loc 1 60 17 is_stmt 1
 439              	.LVL23:
 440              	#NO_APP
 441              	.L12:
 442              	.LBE106:
 443              	.LBE105:
 161:src/riscv.cpp ****         w_sstatus(sstatus);
 444              		.loc 1 161 9
 161:src/riscv.cpp ****         w_sstatus(sstatus);
 445              		.loc 1 161 18 is_stmt 0
 446 01dc 833784F7 		ld	a5,-136(s0)
 447              	.LVL24:
 448              	.LBB114:
 449              	.LBB115:
 174:src/../h/riscv.hpp **** }
 175:src/../h/riscv.hpp **** 
 176:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 177:src/../h/riscv.hpp **** {
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 450              		.loc 2 178 5 is_stmt 1
 451              		.loc 2 178 77 is_stmt 0
 452              	#APP
 453              	# 178 "src/../h/riscv.hpp" 1
 179              	}
 454              		csrw sstatus, a5
 455              	# 0 "" 2
 456              	.LVL25:
 457              	#NO_APP
 458              	.LBE115:
 459              	.LBE114:
 162:src/riscv.cpp ****         w_sepc(sepc);
 460              		.loc 1 162 9 is_stmt 1
 162:src/riscv.cpp ****         w_sepc(sepc);
 461              		.loc 1 162 15 is_stmt 0
 462 01e4 833704F7 		ld	a5,-144(s0)
 463              	.LVL26:
 464              	.LBB116:
 465              	.LBB117:
 110:src/../h/riscv.hpp **** }
 466              		.loc 2 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 467              		.loc 2 110 65 is_stmt 0
 468              	#APP
 469              	# 110 "src/../h/riscv.hpp" 1
GAS LISTING /tmp/ccuwPHk3.s 			page 17


 470              		csrw sepc, a5
 471              	# 0 "" 2
 472              	.LVL27:
 473              	#NO_APP
 474              	.L10:
 475              	.LBE117:
 476              	.LBE116:
 477              	.LBE100:
 478              	.LBE123:
 479              		.loc 1 213 1
 480 01ec 83308108 		ld	ra,136(sp)
 481              		.cfi_remember_state
 482              		.cfi_restore 1
 483 01f0 03340108 		ld	s0,128(sp)
 484              		.cfi_restore 8
 485              		.cfi_def_cfa 2, 144
 486 01f4 83348107 		ld	s1,120(sp)
 487              		.cfi_restore 9
 488 01f8 03390107 		ld	s2,112(sp)
 489              		.cfi_restore 18
 490 01fc 83398106 		ld	s3,104(sp)
 491              		.cfi_restore 19
 492 0200 13010109 		addi	sp,sp,144
 493              		.cfi_def_cfa_offset 0
 494 0204 67800000 		jr	ra
 495              	.LVL28:
 496              	.L26:
 497              		.cfi_restore_state
 498              	.LBB124:
 499              	.LBB119:
 500              	.LBB118:
 501              	.LBB113:
  61:src/riscv.cpp ****             case 0x02: //mem_free
 502              		.loc 1 61 13 is_stmt 1
  62:src/riscv.cpp ****                 void* freePtr;
 503              		.loc 1 62 17
  63:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(freePtr));
 504              		.loc 1 63 17
  63:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(freePtr));
 505              		.loc 1 63 62 is_stmt 0
 506              	#APP
 507              	# 63 "src/riscv.cpp" 1
 508              		mv a0, a1
 509              	# 0 "" 2
 510              	.LVL29:
  64:src/riscv.cpp ****                 res = MemoryAllocator::mem_free(freePtr);
 511              		.loc 1 64 17 is_stmt 1
  64:src/riscv.cpp ****                 res = MemoryAllocator::mem_free(freePtr);
 512              		.loc 1 64 48 is_stmt 0
 513              	#NO_APP
 514 020c 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 514      E7800000 
 515              	.LVL30:
  65:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 516              		.loc 1 65 17 is_stmt 1
  65:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 517              		.loc 1 65 59 is_stmt 0
GAS LISTING /tmp/ccuwPHk3.s 			page 18


 518              	#APP
 519              	# 65 "src/riscv.cpp" 1
  66:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 520              		mv t0, a0
 521              	# 0 "" 2
 522              		.loc 1 66 17 is_stmt 1
  66:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 523              		.loc 1 66 51 is_stmt 0
 524              	# 66 "src/riscv.cpp" 1
  67:src/riscv.cpp ****                 break;
 525              		sd t0, 80(s0)
 526              	# 0 "" 2
 527              		.loc 1 67 17 is_stmt 1
 528              	#NO_APP
 529 021c 6FF01FFC 		j	.L12
 530              	.LVL31:
 531              	.L25:
  68:src/riscv.cpp ****             case 0x11: // thread create
 532              		.loc 1 68 13
  69:src/riscv.cpp ****                 TCB** handle;
 533              		.loc 1 69 17
  70:src/riscv.cpp ****                 void (*start_routine)(void*);
 534              		.loc 1 70 17
  71:src/riscv.cpp ****                 void* arg;
 535              		.loc 1 71 17
  72:src/riscv.cpp ****                 void* stack_space;
 536              		.loc 1 72 17
  73:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (handle));
 537              		.loc 1 73 17
  73:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (handle));
 538              		.loc 1 73 62 is_stmt 0
 539              	#APP
 540              	# 73 "src/riscv.cpp" 1
 541              		mv a0, a1
 542              	# 0 "" 2
 543              	.LVL32:
  74:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2" : "=r" (start_routine));
 544              		.loc 1 74 17 is_stmt 1
  74:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2" : "=r" (start_routine));
 545              		.loc 1 74 69 is_stmt 0
 546              	# 74 "src/riscv.cpp" 1
 547              		mv a1, a2
 548              	# 0 "" 2
 549              	.LVL33:
  75:src/riscv.cpp ****                 __asm__ volatile("mv %0, a3" : "=r" (arg));
 550              		.loc 1 75 17 is_stmt 1
  75:src/riscv.cpp ****                 __asm__ volatile("mv %0, a3" : "=r" (arg));
 551              		.loc 1 75 59 is_stmt 0
 552              	# 75 "src/riscv.cpp" 1
 553              		mv a2, a3
 554              	# 0 "" 2
 555              	.LVL34:
  76:src/riscv.cpp ****                 __asm__ volatile("ld %0, 8*14(s0)" :  "=r" (stack_space));
 556              		.loc 1 76 17 is_stmt 1
  76:src/riscv.cpp ****                 __asm__ volatile("ld %0, 8*14(s0)" :  "=r" (stack_space));
 557              		.loc 1 76 74 is_stmt 0
 558              	# 76 "src/riscv.cpp" 1
GAS LISTING /tmp/ccuwPHk3.s 			page 19


 559              		ld a3, 8*14(s0)
 560              	# 0 "" 2
 561              	.LVL35:
  77:src/riscv.cpp ****                 res = TCB::createThread(handle, start_routine, arg, stack_space);
 562              		.loc 1 77 17 is_stmt 1
  77:src/riscv.cpp ****                 res = TCB::createThread(handle, start_routine, arg, stack_space);
 563              		.loc 1 77 40 is_stmt 0
 564              	#NO_APP
 565 0230 97000000 		call	_ZN3TCB12createThreadEPPS_PFvPvES2_S2_@plt
 565      E7800000 
 566              	.LVL36:
  78:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 567              		.loc 1 78 17 is_stmt 1
  78:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 568              		.loc 1 78 59 is_stmt 0
 569              	#APP
 570              	# 78 "src/riscv.cpp" 1
  79:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 571              		mv t0, a0
 572              	# 0 "" 2
 573              		.loc 1 79 17 is_stmt 1
  79:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 574              		.loc 1 79 51 is_stmt 0
 575              	# 79 "src/riscv.cpp" 1
  80:src/riscv.cpp ****                 break;
 576              		sd t0, 80(s0)
 577              	# 0 "" 2
 578              		.loc 1 80 17 is_stmt 1
 579              	#NO_APP
 580 0240 6FF0DFF9 		j	.L12
 581              	.LVL37:
 582              	.L24:
  81:src/riscv.cpp ****                 case 0x12: // thread exit
 583              		.loc 1 81 17
  82:src/riscv.cpp ****                 res = TCB::thread_exit();
 584              		.loc 1 82 17
 585              	.LBB107:
 586              	.LBB108:
 587              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   2:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   3:src/../h/tcb.hpp **** 
   4:src/../h/tcb.hpp **** #include "../lib/hw.h"
   5:src/../h/tcb.hpp **** #include "scheduler.hpp"
   6:src/../h/tcb.hpp **** #include "../h/memoryAllocator.hpp"
   7:src/../h/tcb.hpp **** #include "../h/sem.hpp"
   8:src/../h/tcb.hpp **** #include "sleepingThreadList.hpp"
   9:src/../h/tcb.hpp **** 
  10:src/../h/tcb.hpp **** typedef TCB* thread_t;
  11:src/../h/tcb.hpp **** 
  12:src/../h/tcb.hpp **** 
  13:src/../h/tcb.hpp **** extern "C" void contextSwitch(uint64* oldSSP, uint64* newSSP);
  14:src/../h/tcb.hpp **** extern "C" void  switchToSSP();
  15:src/../h/tcb.hpp **** extern "C" void  switchToSP();
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp **** // Thread Control Block
  18:src/../h/tcb.hpp **** class TCB
GAS LISTING /tmp/ccuwPHk3.s 			page 20


  19:src/../h/tcb.hpp **** {
  20:src/../h/tcb.hpp **** public:
  21:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; delete sstack;}
  22:src/../h/tcb.hpp **** 
  23:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  24:src/../h/tcb.hpp **** 
  25:src/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
  26:src/../h/tcb.hpp **** 
  27:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
  28:src/../h/tcb.hpp **** 
  29:src/../h/tcb.hpp ****     uint64 getSSP() const { return ssp; }
  30:src/../h/tcb.hpp **** 
  31:src/../h/tcb.hpp ****     uint64 getAddrSSP() { return (uint64) &ssp; }
  32:src/../h/tcb.hpp **** 
  33:src/../h/tcb.hpp ****     int getTid() const {return tid;}
  34:src/../h/tcb.hpp **** 
  35:src/../h/tcb.hpp ****     void setSleeping (bool sleep) {this->sleeping = sleep;}
  36:src/../h/tcb.hpp **** 
  37:src/../h/tcb.hpp ****     void setSys(bool sys) {isSys = sys;}
  38:src/../h/tcb.hpp **** 
  39:src/../h/tcb.hpp ****     using Body = void (*)(void*);
  40:src/../h/tcb.hpp **** 
  41:src/../h/tcb.hpp ****     static int createThread(TCB** handle, Body body, void* arg, void* stack_space);
  42:src/../h/tcb.hpp **** 
  43:src/../h/tcb.hpp **** 
  44:src/../h/tcb.hpp ****     static int thread_exit() {
  45:src/../h/tcb.hpp ****         running->finished = true;
 588              		.loc 3 45 9
 589              		.loc 3 45 18 is_stmt 0
 590 0244 97070000 		la	a5,_ZN3TCB7runningE
 590      83B70700 
 591 024c 83B70700 		ld	a5,0(a5)
 592              		.loc 3 45 27
 593 0250 13071000 		li	a4,1
 594 0254 2384E704 		sb	a4,72(a5)
  46:src/../h/tcb.hpp ****         dispatch();
 595              		.loc 3 46 9 is_stmt 1
 596              		.loc 3 46 17 is_stmt 0
 597 0258 97000000 		call	_ZN3TCB8dispatchEv@plt
 597      E7800000 
 598              	.LVL38:
  47:src/../h/tcb.hpp ****         return -1;
 599              		.loc 3 47 9 is_stmt 1
 600              	.LBE108:
 601              	.LBE107:
  83:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 602              		.loc 1 83 17
  83:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 603              		.loc 1 83 59 is_stmt 0
 604 0260 9307F0FF 		li	a5,-1
 605              	#APP
 606              	# 83 "src/riscv.cpp" 1
  84:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 607              		mv t0, a5
 608              	# 0 "" 2
 609              		.loc 1 84 17 is_stmt 1
  84:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
GAS LISTING /tmp/ccuwPHk3.s 			page 21


 610              		.loc 1 84 51 is_stmt 0
 611              	# 84 "src/riscv.cpp" 1
  85:src/riscv.cpp ****                 break;
 612              		sd t0, 80(s0)
 613              	# 0 "" 2
 614              		.loc 1 85 17 is_stmt 1
 615              	#NO_APP
 616 026c 6FF01FF7 		j	.L12
 617              	.LVL39:
 618              	.L23:
  86:src/riscv.cpp ****             case 0x13:
 619              		.loc 1 86 13
  87:src/riscv.cpp ****                 TCB::dispatch();
 620              		.loc 1 87 17
  87:src/riscv.cpp ****                 TCB::dispatch();
 621              		.loc 1 87 30 is_stmt 0
 622 0270 97000000 		call	_ZN3TCB8dispatchEv@plt
 622      E7800000 
 623              	.LVL40:
  88:src/riscv.cpp ****                 break;
 624              		.loc 1 88 17 is_stmt 1
 625 0278 6FF05FF6 		j	.L12
 626              	.L22:
  89:src/riscv.cpp ****             case 0x21: // sem open XXX
 627              		.loc 1 89 13
  90:src/riscv.cpp ****                 sem** semHandle;
 628              		.loc 1 90 17
  91:src/riscv.cpp ****                 int init;
 629              		.loc 1 91 17
  92:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (semHandle));
 630              		.loc 1 92 17
  92:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (semHandle));
 631              		.loc 1 92 65 is_stmt 0
 632              	#APP
 633              	# 92 "src/riscv.cpp" 1
 634              		mv s2, a1
 635              	# 0 "" 2
 636              	.LVL41:
  93:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2" : "=r" (init));
 637              		.loc 1 93 17 is_stmt 1
  93:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2" : "=r" (init));
 638              		.loc 1 93 60 is_stmt 0
 639              	# 93 "src/riscv.cpp" 1
 640              		mv s1, a2
 641              	# 0 "" 2
 642              	.LVL42:
 643              	#NO_APP
 644 0284 9B840400 		sext.w	s1,s1
 645              	.LVL43:
  94:src/riscv.cpp ****                 sem *semaphore;
 646              		.loc 1 94 17 is_stmt 1
  95:src/riscv.cpp ****                 semaphore = new sem(init, semHandle);
 647              		.loc 1 95 17
  95:src/riscv.cpp ****                 semaphore = new sem(init, semHandle);
 648              		.loc 1 95 52 is_stmt 0
 649 0288 13050034 		li	a0,832
 650 028c 97000000 		call	_ZN3semnwEm@plt
GAS LISTING /tmp/ccuwPHk3.s 			page 22


 650      E7800000 
 651              	.LVL44:
 652              	.LBB109:
 653              	.LBB110:
 654              		.file 4 "src/../h/../h/sem.hpp"
   1:src/../h/../h/sem.hpp **** #ifndef PROJECT_BASE_SEM_HPP
   2:src/../h/../h/sem.hpp **** #define PROJECT_BASE_SEM_HPP
   3:src/../h/../h/sem.hpp **** 
   4:src/../h/../h/sem.hpp **** #include "../h/tcb.hpp"
   5:src/../h/../h/sem.hpp **** #include "../h/list.hpp"
   6:src/../h/../h/sem.hpp **** #include "../h/threadList.hpp"
   7:src/../h/../h/sem.hpp **** 
   8:src/../h/../h/sem.hpp **** struct Elem {
   9:src/../h/../h/sem.hpp ****     TCB* tcb;
  10:src/../h/../h/sem.hpp ****     uint64 timeLeft;
  11:src/../h/../h/sem.hpp ****     Elem* next;
  12:src/../h/../h/sem.hpp **** 
  13:src/../h/../h/sem.hpp ****     Elem(TCB* tcb, int time, Elem* nxt = nullptr)
  14:src/../h/../h/sem.hpp ****             : tcb(tcb), timeLeft(time), next(nxt) {}
  15:src/../h/../h/sem.hpp **** };
  16:src/../h/../h/sem.hpp **** 
  17:src/../h/../h/sem.hpp **** class sem{
  18:src/../h/../h/sem.hpp **** public:
  19:src/../h/../h/sem.hpp ****     sem(unsigned short init = 1, sem** handle = nullptr) : val(init), handle(handle){}
 655              		.loc 4 19 84
 656 0294 93940403 		slli	s1,s1,48
 657              	.LVL45:
 658 0298 93D40403 		srli	s1,s1,48
 659 029c 23209500 		sw	s1,0(a0)
 660              	.LVL46:
 661              	.LBB111:
 662              	.LBB112:
 663              		.file 5 "src/../h/../h/../h/threadList.hpp"
   1:src/../h/../h/../h/threadList.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_1_SYNCHRONOUS_THREAD_LIST_HPP
   2:src/../h/../h/../h/threadList.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_1_SYNCHRONOUS_THREAD_LIST_HPP
   3:src/../h/../h/../h/threadList.hpp **** 
   4:src/../h/../h/../h/threadList.hpp **** #include "../lib/hw.h"
   5:src/../h/../h/../h/threadList.hpp **** #include "memoryAllocator.hpp"
   6:src/../h/../h/../h/threadList.hpp **** #include "tcb.hpp"
   7:src/../h/../h/../h/threadList.hpp **** 
   8:src/../h/../h/../h/threadList.hpp **** class ThreadList {
   9:src/../h/../h/../h/threadList.hpp **** private:
  10:src/../h/../h/../h/threadList.hpp ****     static const int MAX_SIZE = 100;
  11:src/../h/../h/../h/threadList.hpp ****     TCB* list[MAX_SIZE];
  12:src/../h/../h/../h/threadList.hpp ****     int head = 1;
  13:src/../h/../h/../h/threadList.hpp ****     int tail = 1;
  14:src/../h/../h/../h/threadList.hpp ****     int count = 1;
  15:src/../h/../h/../h/threadList.hpp **** 
  16:src/../h/../h/../h/threadList.hpp **** public:
  17:src/../h/../h/../h/threadList.hpp ****     ThreadList() : head(0), tail(0), count(0) {}
 664              		.loc 5 17 45
 665 02a0 23240532 		sw	zero,808(a0)
 666 02a4 23260532 		sw	zero,812(a0)
 667 02a8 23280532 		sw	zero,816(a0)
 668              	.LVL47:
 669              	.LBE112:
 670              	.LBE111:
GAS LISTING /tmp/ccuwPHk3.s 			page 23


 671              		.loc 4 19 84
 672 02ac 233C2533 		sd	s2,824(a0)
 673              	.LVL48:
 674              	.LBE110:
 675              	.LBE109:
  96:src/riscv.cpp ****                 if(!semaphore){
 676              		.loc 1 96 17 is_stmt 1
 677 02b0 630C0500 		beqz	a0,.L36
  99:src/riscv.cpp ****                     *(semHandle) = semaphore;
 678              		.loc 1 99 21
  99:src/riscv.cpp ****                     *(semHandle) = semaphore;
 679              		.loc 1 99 34 is_stmt 0
 680 02b4 2330A900 		sd	a0,0(s2)
 100:src/riscv.cpp ****                     res = 0;
 681              		.loc 1 100 21 is_stmt 1
 682              	.LVL49:
 100:src/riscv.cpp ****                     res = 0;
 683              		.loc 1 100 25 is_stmt 0
 684 02b8 93070000 		li	a5,0
 685              	.LVL50:
 686              	.L28:
 102:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 687              		.loc 1 102 17 is_stmt 1
 102:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 688              		.loc 1 102 59 is_stmt 0
 689              	#APP
 690              	# 102 "src/riscv.cpp" 1
 103:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 691              		mv t0, a5
 692              	# 0 "" 2
 693              		.loc 1 103 17 is_stmt 1
 103:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 694              		.loc 1 103 51 is_stmt 0
 695              	# 103 "src/riscv.cpp" 1
 104:src/riscv.cpp ****                 break;
 696              		sd t0, 80(s0)
 697              	# 0 "" 2
 698              		.loc 1 104 17 is_stmt 1
 699              	#NO_APP
 700 02c4 6FF09FF1 		j	.L12
 701              	.LVL51:
 702              	.L36:
  97:src/riscv.cpp ****                     res = -1;
 703              		.loc 1 97 25 is_stmt 0
 704 02c8 9307F0FF 		li	a5,-1
 705 02cc 6FF01FFF 		j	.L28
 706              	.LVL52:
 707              	.L21:
 105:src/riscv.cpp ****             case 0x22: // sem close
 708              		.loc 1 105 13 is_stmt 1
 106:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (id));
 709              		.loc 1 106 17
 106:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (id));
 710              		.loc 1 106 58 is_stmt 0
 711              	#APP
 712              	# 106 "src/riscv.cpp" 1
 713              		mv s1, a1
GAS LISTING /tmp/ccuwPHk3.s 			page 24


 714              	# 0 "" 2
 715              	.LVL53:
 107:src/riscv.cpp ****                 if(!id){
 716              		.loc 1 107 17 is_stmt 1
 717              	#NO_APP
 718 02d4 63860402 		beqz	s1,.L37
 110:src/riscv.cpp ****                     delete id;
 719              		.loc 1 110 21 discriminator 1
 110:src/riscv.cpp ****                     delete id;
 720              		.loc 1 110 28 is_stmt 0 discriminator 1
 721 02d8 13850400 		mv	a0,s1
 722 02dc 97000000 		call	_ZN3semD1Ev@plt
 722      E7800000 
 723              	.LVL54:
 724 02e4 13850400 		mv	a0,s1
 725 02e8 97000000 		call	_ZN3semdlEPv@plt
 725      E7800000 
 726              	.LVL55:
 111:src/riscv.cpp ****                     res = 0;
 727              		.loc 1 111 21 is_stmt 1 discriminator 1
 111:src/riscv.cpp ****                     res = 0;
 728              		.loc 1 111 25 is_stmt 0 discriminator 1
 729 02f0 93070000 		li	a5,0
 730              	.LVL56:
 731              	.L29:
 113:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 732              		.loc 1 113 17 is_stmt 1
 113:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 733              		.loc 1 113 59 is_stmt 0
 734              	#APP
 735              	# 113 "src/riscv.cpp" 1
 114:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 736              		mv t0, a5
 737              	# 0 "" 2
 738              		.loc 1 114 17 is_stmt 1
 114:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 739              		.loc 1 114 51 is_stmt 0
 740              	# 114 "src/riscv.cpp" 1
 115:src/riscv.cpp ****                 break;
 741              		sd t0, 80(s0)
 742              	# 0 "" 2
 743              		.loc 1 115 17 is_stmt 1
 744              	#NO_APP
 745 02fc 6FF01FEE 		j	.L12
 746              	.LVL57:
 747              	.L37:
 108:src/riscv.cpp ****                     res = -1;
 748              		.loc 1 108 25 is_stmt 0
 749 0300 9307F0FF 		li	a5,-1
 750 0304 6FF01FFF 		j	.L29
 751              	.LVL58:
 752              	.L20:
 116:src/riscv.cpp ****             case 0x23: // sem wait xxx
 753              		.loc 1 116 13 is_stmt 1
 117:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (id));
 754              		.loc 1 117 17
 117:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (id));
GAS LISTING /tmp/ccuwPHk3.s 			page 25


 755              		.loc 1 117 58 is_stmt 0
 756              	#APP
 757              	# 117 "src/riscv.cpp" 1
 758              		mv a0, a1
 759              	# 0 "" 2
 760              	.LVL59:
 118:src/riscv.cpp ****                 res = id->wait();
 761              		.loc 1 118 17 is_stmt 1
 118:src/riscv.cpp ****                 res = id->wait();
 762              		.loc 1 118 31 is_stmt 0
 763              	#NO_APP
 764 030c 97000000 		call	_ZN3sem4waitEv@plt
 764      E7800000 
 765              	.LVL60:
 119:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 766              		.loc 1 119 17 is_stmt 1
 119:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 767              		.loc 1 119 59 is_stmt 0
 768              	#APP
 769              	# 119 "src/riscv.cpp" 1
 120:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 770              		mv t0, a0
 771              	# 0 "" 2
 772              		.loc 1 120 17 is_stmt 1
 120:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 773              		.loc 1 120 51 is_stmt 0
 774              	# 120 "src/riscv.cpp" 1
 121:src/riscv.cpp ****                 break;
 775              		sd t0, 80(s0)
 776              	# 0 "" 2
 777              		.loc 1 121 17 is_stmt 1
 778              	#NO_APP
 779 031c 6FF01FEC 		j	.L12
 780              	.LVL61:
 781              	.L19:
 122:src/riscv.cpp ****             case 0x24: // sem signal xxx
 782              		.loc 1 122 13
 123:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (id));
 783              		.loc 1 123 17
 123:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (id));
 784              		.loc 1 123 58 is_stmt 0
 785              	#APP
 786              	# 123 "src/riscv.cpp" 1
 787              		mv a0, a1
 788              	# 0 "" 2
 789              	.LVL62:
 124:src/riscv.cpp ****                 res = id->signal();
 790              		.loc 1 124 17 is_stmt 1
 124:src/riscv.cpp ****                 res = id->signal();
 791              		.loc 1 124 33 is_stmt 0
 792              	#NO_APP
 793 0324 97000000 		call	_ZN3sem6signalEv@plt
 793      E7800000 
 794              	.LVL63:
 125:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 795              		.loc 1 125 17 is_stmt 1
 125:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
GAS LISTING /tmp/ccuwPHk3.s 			page 26


 796              		.loc 1 125 59 is_stmt 0
 797              	#APP
 798              	# 125 "src/riscv.cpp" 1
 126:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 799              		mv t0, a0
 800              	# 0 "" 2
 801              		.loc 1 126 17 is_stmt 1
 126:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 802              		.loc 1 126 51 is_stmt 0
 803              	# 126 "src/riscv.cpp" 1
 127:src/riscv.cpp ****                 break;
 804              		sd t0, 80(s0)
 805              	# 0 "" 2
 806              		.loc 1 127 17 is_stmt 1
 807              	#NO_APP
 808 0334 6FF09FEA 		j	.L12
 809              	.LVL64:
 810              	.L18:
 128:src/riscv.cpp ****             case 0x25: // sem timedwait xxx
 811              		.loc 1 128 13
 129:src/riscv.cpp ****                 time_t timeout;
 812              		.loc 1 129 17
 130:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (id));
 813              		.loc 1 130 17
 130:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (id));
 814              		.loc 1 130 58 is_stmt 0
 815              	#APP
 816              	# 130 "src/riscv.cpp" 1
 817              		mv a0, a1
 818              	# 0 "" 2
 819              	.LVL65:
 131:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2" : "=r" (timeout));
 820              		.loc 1 131 17 is_stmt 1
 131:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2" : "=r" (timeout));
 821              		.loc 1 131 63 is_stmt 0
 822              	# 131 "src/riscv.cpp" 1
 823              		mv a1, a2
 824              	# 0 "" 2
 825              	.LVL66:
 132:src/riscv.cpp ****                 res = id->timedWait(timeout);
 826              		.loc 1 132 17 is_stmt 1
 132:src/riscv.cpp ****                 res = id->timedWait(timeout);
 827              		.loc 1 132 36 is_stmt 0
 828              	#NO_APP
 829 0340 97000000 		call	_ZN3sem9timedWaitEm@plt
 829      E7800000 
 830              	.LVL67:
 133:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 831              		.loc 1 133 17 is_stmt 1
 133:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 832              		.loc 1 133 59 is_stmt 0
 833              	#APP
 834              	# 133 "src/riscv.cpp" 1
 134:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 835              		mv t0, a0
 836              	# 0 "" 2
 837              		.loc 1 134 17 is_stmt 1
GAS LISTING /tmp/ccuwPHk3.s 			page 27


 134:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 838              		.loc 1 134 51 is_stmt 0
 839              	# 134 "src/riscv.cpp" 1
 135:src/riscv.cpp ****                 break;
 840              		sd t0, 80(s0)
 841              	# 0 "" 2
 842              		.loc 1 135 17 is_stmt 1
 843              	#NO_APP
 844 0350 6FF0DFE8 		j	.L12
 845              	.LVL68:
 846              	.L17:
 136:src/riscv.cpp ****             case 0x26: // sem tryWait xxx
 847              		.loc 1 136 13
 137:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (id));
 848              		.loc 1 137 17
 137:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (id));
 849              		.loc 1 137 58 is_stmt 0
 850              	#APP
 851              	# 137 "src/riscv.cpp" 1
 852              		mv a0, a1
 853              	# 0 "" 2
 854              	.LVL69:
 138:src/riscv.cpp ****                 res = id->tryWait();
 855              		.loc 1 138 17 is_stmt 1
 138:src/riscv.cpp ****                 res = id->tryWait();
 856              		.loc 1 138 34 is_stmt 0
 857              	#NO_APP
 858 0358 97000000 		call	_ZN3sem7tryWaitEv@plt
 858      E7800000 
 859              	.LVL70:
 139:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 860              		.loc 1 139 17 is_stmt 1
 139:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 861              		.loc 1 139 59 is_stmt 0
 862              	#APP
 863              	# 139 "src/riscv.cpp" 1
 140:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 864              		mv t0, a0
 865              	# 0 "" 2
 866              		.loc 1 140 17 is_stmt 1
 140:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 867              		.loc 1 140 51 is_stmt 0
 868              	# 140 "src/riscv.cpp" 1
 141:src/riscv.cpp ****                 break;
 869              		sd t0, 80(s0)
 870              	# 0 "" 2
 871              		.loc 1 141 17 is_stmt 1
 872              	#NO_APP
 873 0368 6FF05FE7 		j	.L12
 874              	.LVL71:
 875              	.L16:
 142:src/riscv.cpp ****             case 0x31: // time sleep
 876              		.loc 1 142 13
 143:src/riscv.cpp ****                 time_t sleep_time;
 877              		.loc 1 143 17
 144:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (sleep_time));
 878              		.loc 1 144 17
GAS LISTING /tmp/ccuwPHk3.s 			page 28


 144:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (sleep_time));
 879              		.loc 1 144 66 is_stmt 0
 880              	#APP
 881              	# 144 "src/riscv.cpp" 1
 882              		mv a0, a1
 883              	# 0 "" 2
 884              	.LVL72:
 145:src/riscv.cpp ****                 res = TCB::putToSleep(sleep_time);
 885              		.loc 1 145 17 is_stmt 1
 145:src/riscv.cpp ****                 res = TCB::putToSleep(sleep_time);
 886              		.loc 1 145 38 is_stmt 0
 887              	#NO_APP
 888 0370 97000000 		call	_ZN3TCB10putToSleepEm@plt
 888      E7800000 
 889              	.LVL73:
 146:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 890              		.loc 1 146 17 is_stmt 1
 146:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(res));
 891              		.loc 1 146 59 is_stmt 0
 892              	#APP
 893              	# 146 "src/riscv.cpp" 1
 147:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 894              		mv t0, a0
 895              	# 0 "" 2
 896              		.loc 1 147 17 is_stmt 1
 147:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 897              		.loc 1 147 51 is_stmt 0
 898              	# 147 "src/riscv.cpp" 1
 148:src/riscv.cpp ****                 break;
 899              		sd t0, 80(s0)
 900              	# 0 "" 2
 901              		.loc 1 148 17 is_stmt 1
 902              	#NO_APP
 903 0380 6FF0DFE5 		j	.L12
 904              	.LVL74:
 905              	.L15:
 149:src/riscv.cpp ****             case 0x41: // getc
 906              		.loc 1 149 13
 150:src/riscv.cpp ****                 c = myConsole::getc();
 907              		.loc 1 150 17
 150:src/riscv.cpp ****                 c = myConsole::getc();
 908              		.loc 1 150 36 is_stmt 0
 909 0384 97000000 		call	_ZN9myConsole4getcEv@plt
 909      E7800000 
 910              	.LVL75:
 151:src/riscv.cpp ****                 if(!c) c = EOF;
 911              		.loc 1 151 17 is_stmt 1
 912 038c 63140500 		bnez	a0,.L30
 151:src/riscv.cpp ****                 if(!c) c = EOF;
 913              		.loc 1 151 26 is_stmt 0
 914 0390 1305F00F 		li	a0,255
 915              	.LVL76:
 916              	.L30:
 152:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(c));
 917              		.loc 1 152 17 is_stmt 1
 152:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(c));
 918              		.loc 1 152 57 is_stmt 0
GAS LISTING /tmp/ccuwPHk3.s 			page 29


 919              	#APP
 920              	# 152 "src/riscv.cpp" 1
 153:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 921              		mv t0, a0
 922              	# 0 "" 2
 923              		.loc 1 153 17 is_stmt 1
 153:src/riscv.cpp ****                 __asm__ volatile ("sd t0, 80(s0)");
 924              		.loc 1 153 51 is_stmt 0
 925              	# 153 "src/riscv.cpp" 1
 154:src/riscv.cpp ****                 break;
 926              		sd t0, 80(s0)
 927              	# 0 "" 2
 928              		.loc 1 154 17 is_stmt 1
 929              	#NO_APP
 930 039c 6FF01FE4 		j	.L12
 931              	.LVL77:
 932              	.L13:
 155:src/riscv.cpp ****             case 0x42: // putc
 933              		.loc 1 155 13
 156:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (c));
 934              		.loc 1 156 17
 156:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (c));
 935              		.loc 1 156 57 is_stmt 0
 936              	#APP
 937              	# 156 "src/riscv.cpp" 1
 938              		mv a0, a1
 939              	# 0 "" 2
 940              	.LVL78:
 157:src/riscv.cpp ****                 myConsole::putc(c);
 941              		.loc 1 157 17 is_stmt 1
 157:src/riscv.cpp ****                 myConsole::putc(c);
 942              		.loc 1 157 32 is_stmt 0
 943              	#NO_APP
 944 03a4 1375F50F 		andi	a0,a0,0xff
 945 03a8 97000000 		call	_ZN9myConsole4putcEc@plt
 945      E7800000 
 946              	.LVL79:
 158:src/riscv.cpp ****                 break;
 947              		.loc 1 158 17 is_stmt 1
 948 03b0 6FF0DFE2 		j	.L12
 949              	.L41:
 950              	.LBE113:
 951              	.LBE118:
 952              	.LBE119:
 953              	.LBB120:
 954              	.LBB83:
 168:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 955              		.loc 1 168 9
 956              	.LVL80:
 957              	.LBB84:
 958              	.LBB85:
 144:src/../h/riscv.hpp **** }
 959              		.loc 2 144 5
 144:src/../h/riscv.hpp **** }
 960              		.loc 2 144 64 is_stmt 0
 961 03b4 93072000 		li	a5,2
 962              	#APP
GAS LISTING /tmp/ccuwPHk3.s 			page 30


 963              	# 144 "src/../h/riscv.hpp" 1
 964              		csrc sip, a5
 965              	# 0 "" 2
 966              	.LVL81:
 967              	#NO_APP
 968              	.LBE85:
 969              	.LBE84:
 169:src/riscv.cpp ****         updateSemTimeBlockedList();
 970              		.loc 1 169 9 is_stmt 1
 169:src/riscv.cpp ****         updateSemTimeBlockedList();
 971              		.loc 1 169 33 is_stmt 0
 972 03bc 97000000 		call	_ZL24updateSemTimeBlockedListv
 972      E7800000 
 973              	.LVL82:
 170:src/riscv.cpp ****         TCB::updateSleepingThreads();
 974              		.loc 1 170 9 is_stmt 1
 170:src/riscv.cpp ****         TCB::updateSleepingThreads();
 975              		.loc 1 170 35 is_stmt 0
 976 03c4 97000000 		call	_ZN3TCB21updateSleepingThreadsEv@plt
 976      E7800000 
 977              	.LVL83:
 172:src/riscv.cpp ****         TCB::timeSliceCounter++;
 978              		.loc 1 172 9 is_stmt 1
 172:src/riscv.cpp ****         TCB::timeSliceCounter++;
 979              		.loc 1 172 30 is_stmt 0
 980 03cc 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 980      03370700 
 981 03d4 83370700 		ld	a5,0(a4)
 982 03d8 93871700 		addi	a5,a5,1
 983 03dc 2330F700 		sd	a5,0(a4)
 173:src/riscv.cpp ****         uint64 time  = TCB::running->getTimeSlice();
 984              		.loc 1 173 9 is_stmt 1
 173:src/riscv.cpp ****         uint64 time  = TCB::running->getTimeSlice();
 985              		.loc 1 173 50 is_stmt 0
 986 03e0 17070000 		la	a4,_ZN3TCB7runningE
 986      03370700 
 987 03e8 03370700 		ld	a4,0(a4)
 988              	.LVL84:
 989              	.LBB86:
 990              	.LBB87:
  27:src/../h/tcb.hpp **** 
 991              		.loc 3 27 35 is_stmt 1
  27:src/../h/tcb.hpp **** 
 992              		.loc 3 27 42 is_stmt 0
 993 03ec 03370704 		ld	a4,64(a4)
 994              	.LVL85:
 995              	.LBE87:
 996              	.LBE86:
 174:src/riscv.cpp ****         if (TCB::timeSliceCounter >= time)
 997              		.loc 1 174 9 is_stmt 1
 998              	.LBB88:
 999 03f0 E3EEE7DE 		bltu	a5,a4,.L10
 1000              	.LBB89:
 176:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 1001              		.loc 1 176 13
 1002              	.LBB90:
 1003              	.LBB91:
GAS LISTING /tmp/ccuwPHk3.s 			page 31


 103:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 1004              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     return sepc;
 1005              		.loc 2 104 5
 104:src/../h/riscv.hpp ****     return sepc;
 1006              		.loc 2 104 64 is_stmt 0
 1007              	#APP
 1008              	# 104 "src/../h/riscv.hpp" 1
 1009              		csrr a5, sepc
 1010              	# 0 "" 2
 1011              	#NO_APP
 1012 03f8 2338F4FA 		sd	a5,-80(s0)
 105:src/../h/riscv.hpp **** }
 1013              		.loc 2 105 5 is_stmt 1
 105:src/../h/riscv.hpp **** }
 1014              		.loc 2 105 12 is_stmt 0
 1015 03fc 833704FB 		ld	a5,-80(s0)
 1016              	.LBE91:
 1017              	.LBE90:
 176:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 1018              		.loc 1 176 43
 1019 0400 2330F4F8 		sd	a5,-128(s0)
 177:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 1020              		.loc 1 177 13 is_stmt 1
 1021              	.LBB92:
 1022              	.LBB93:
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 1023              		.loc 2 171 5
 172:src/../h/riscv.hpp ****     return sstatus;
 1024              		.loc 2 172 5
 172:src/../h/riscv.hpp ****     return sstatus;
 1025              		.loc 2 172 76 is_stmt 0
 1026              	#APP
 1027              	# 172 "src/../h/riscv.hpp" 1
 1028              		csrr a5, sstatus
 1029              	# 0 "" 2
 1030              	#NO_APP
 1031 0408 2334F4FA 		sd	a5,-88(s0)
 173:src/../h/riscv.hpp **** }
 1032              		.loc 2 173 5 is_stmt 1
 173:src/../h/riscv.hpp **** }
 1033              		.loc 2 173 12 is_stmt 0
 1034 040c 833784FA 		ld	a5,-88(s0)
 1035              	.LBE93:
 1036              	.LBE92:
 177:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 1037              		.loc 1 177 49
 1038 0410 2334F4F8 		sd	a5,-120(s0)
 178:src/riscv.cpp ****             TCB::dispatch();
 1039              		.loc 1 178 13 is_stmt 1
 178:src/riscv.cpp ****             TCB::dispatch();
 1040              		.loc 1 178 26 is_stmt 0
 1041 0414 97000000 		call	_ZN3TCB8dispatchEv@plt
 1041      E7800000 
 1042              	.LVL86:
 179:src/riscv.cpp ****             w_sstatus(sstatus);
 1043              		.loc 1 179 13 is_stmt 1
GAS LISTING /tmp/ccuwPHk3.s 			page 32


 179:src/riscv.cpp ****             w_sstatus(sstatus);
 1044              		.loc 1 179 22 is_stmt 0
 1045 041c 833784F8 		ld	a5,-120(s0)
 1046              	.LVL87:
 1047              	.LBB94:
 1048              	.LBB95:
 178:src/../h/riscv.hpp **** }
 1049              		.loc 2 178 5 is_stmt 1
 178:src/../h/riscv.hpp **** }
 1050              		.loc 2 178 77 is_stmt 0
 1051              	#APP
 1052              	# 178 "src/../h/riscv.hpp" 1
 1053              		csrw sstatus, a5
 1054              	# 0 "" 2
 1055              	.LVL88:
 1056              	#NO_APP
 1057              	.LBE95:
 1058              	.LBE94:
 180:src/riscv.cpp ****             w_sepc(sepc);
 1059              		.loc 1 180 13 is_stmt 1
 180:src/riscv.cpp ****             w_sepc(sepc);
 1060              		.loc 1 180 19 is_stmt 0
 1061 0424 833704F8 		ld	a5,-128(s0)
 1062              	.LVL89:
 1063              	.LBB96:
 1064              	.LBB97:
 110:src/../h/riscv.hpp **** }
 1065              		.loc 2 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 1066              		.loc 2 110 65 is_stmt 0
 1067              	#APP
 1068              	# 110 "src/../h/riscv.hpp" 1
 111:src/../h/riscv.hpp **** 
 1069              		csrw sepc, a5
 1070              	# 0 "" 2
 1071              		.loc 2 111 1
 1072              	#NO_APP
 1073 042c 6FF01FDC 		j	.L10
 1074              	.LVL90:
 1075              	.L42:
 1076              	.LBE97:
 1077              	.LBE96:
 1078              	.LBE89:
 1079              	.LBE88:
 1080              	.LBE83:
 1081              	.LBB98:
 1082              	.LBB70:
 186:src/riscv.cpp ****         uint64 sepc = r_sepc();
 1083              		.loc 1 186 9 is_stmt 1
 1084              	.LBB71:
 1085              	.LBB72:
 103:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 1086              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     return sepc;
 1087              		.loc 2 104 5
 104:src/../h/riscv.hpp ****     return sepc;
 1088              		.loc 2 104 64 is_stmt 0
GAS LISTING /tmp/ccuwPHk3.s 			page 33


 1089              	#APP
 1090              	# 104 "src/../h/riscv.hpp" 1
 1091              		csrr a5, sepc
 1092              	# 0 "" 2
 1093              	#NO_APP
 1094 0434 2330F4FC 		sd	a5,-64(s0)
 105:src/../h/riscv.hpp **** }
 1095              		.loc 2 105 5 is_stmt 1
 105:src/../h/riscv.hpp **** }
 1096              		.loc 2 105 12 is_stmt 0
 1097 0438 033904FC 		ld	s2,-64(s0)
 1098              	.LVL91:
 1099              	.LBE72:
 1100              	.LBE71:
 187:src/riscv.cpp ****         uint64 sstatus = r_sstatus();
 1101              		.loc 1 187 9 is_stmt 1
 1102              	.LBB73:
 1103              	.LBB74:
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 1104              		.loc 2 171 5
 172:src/../h/riscv.hpp ****     return sstatus;
 1105              		.loc 2 172 5
 172:src/../h/riscv.hpp ****     return sstatus;
 1106              		.loc 2 172 76 is_stmt 0
 1107              	#APP
 1108              	# 172 "src/../h/riscv.hpp" 1
 1109              		csrr a5, sstatus
 1110              	# 0 "" 2
 1111              	#NO_APP
 1112 0440 233CF4FA 		sd	a5,-72(s0)
 173:src/../h/riscv.hpp **** }
 1113              		.loc 2 173 5 is_stmt 1
 173:src/../h/riscv.hpp **** }
 1114              		.loc 2 173 12 is_stmt 0
 1115 0444 833984FB 		ld	s3,-72(s0)
 1116              	.LVL92:
 1117              	.LBE74:
 1118              	.LBE73:
 188:src/riscv.cpp ****         if (plic_claim() == 0x0a){
 1119              		.loc 1 188 9 is_stmt 1
 1120              	.LBB75:
 188:src/riscv.cpp ****         if (plic_claim() == 0x0a){
 1121              		.loc 1 188 23 is_stmt 0
 1122 0448 97000000 		call	plic_claim@plt
 1122      E7800000 
 1123              	.LVL93:
 188:src/riscv.cpp ****         if (plic_claim() == 0x0a){
 1124              		.loc 1 188 9
 1125 0450 9307A000 		li	a5,10
 1126 0454 630EF500 		beq	a0,a5,.L43
 1127              	.LVL94:
 1128              	.L34:
 1129              	.LBE75:
 196:src/riscv.cpp ****         plic_complete(0x0a);
 1130              		.loc 1 196 9 is_stmt 1
 196:src/riscv.cpp ****         plic_complete(0x0a);
 1131              		.loc 1 196 22 is_stmt 0
GAS LISTING /tmp/ccuwPHk3.s 			page 34


 1132 0458 1305A000 		li	a0,10
 1133 045c 97000000 		call	plic_complete@plt
 1133      E7800000 
 1134              	.LVL95:
 197:src/riscv.cpp ****         w_sstatus(sstatus);
 1135              		.loc 1 197 9 is_stmt 1
 1136              	.LBB78:
 1137              	.LBB79:
 178:src/../h/riscv.hpp **** }
 1138              		.loc 2 178 5
 178:src/../h/riscv.hpp **** }
 1139              		.loc 2 178 77 is_stmt 0
 1140              	#APP
 1141              	# 178 "src/../h/riscv.hpp" 1
 1142              		csrw sstatus, s3
 1143              	# 0 "" 2
 1144              	.LVL96:
 1145              	#NO_APP
 1146              	.LBE79:
 1147              	.LBE78:
 198:src/riscv.cpp ****         w_sepc(sepc);
 1148              		.loc 1 198 9 is_stmt 1
 1149              	.LBB80:
 1150              	.LBB81:
 110:src/../h/riscv.hpp **** }
 1151              		.loc 2 110 5
 110:src/../h/riscv.hpp **** }
 1152              		.loc 2 110 65 is_stmt 0
 1153              	#APP
 1154              	# 110 "src/../h/riscv.hpp" 1
 111:src/../h/riscv.hpp **** 
 1155              		csrw sepc, s2
 1156              	# 0 "" 2
 1157              		.loc 2 111 1
 1158              	#NO_APP
 1159 046c 6FF01FD8 		j	.L10
 1160              	.LVL97:
 1161              	.L43:
 1162              	.LBE81:
 1163              	.LBE80:
 1164              	.LBB82:
 1165              	.LBB76:
 189:src/riscv.cpp ****             char status = *(char*)CONSOLE_STATUS;
 1166              		.loc 1 189 13 is_stmt 1
 189:src/riscv.cpp ****             char status = *(char*)CONSOLE_STATUS;
 1167              		.loc 1 189 27 is_stmt 0
 1168 0470 97070000 		la	a5,CONSOLE_STATUS
 1168      83B70700 
 1169 0478 83B40700 		ld	s1,0(a5)
 1170              	.LVL98:
 189:src/riscv.cpp ****             char status = *(char*)CONSOLE_STATUS;
 1171              		.loc 1 189 18
 1172 047c 83C70400 		lbu	a5,0(s1)
 1173              	.LVL99:
 1174              	.L35:
 190:src/riscv.cpp ****             while (CONSOLE_RX_STATUS_BIT & status){
 1175              		.loc 1 190 13 is_stmt 1
GAS LISTING /tmp/ccuwPHk3.s 			page 35


 190:src/riscv.cpp ****             while (CONSOLE_RX_STATUS_BIT & status){
 1176              		.loc 1 190 44
 1177 0480 93F71700 		andi	a5,a5,1
 1178              	.LVL100:
 1179 0484 E38A07FC 		beqz	a5,.L34
 1180              	.LBB77:
 191:src/riscv.cpp ****                 char ch = *(char*) CONSOLE_RX_DATA;
 1181              		.loc 1 191 17
 191:src/riscv.cpp ****                 char ch = *(char*) CONSOLE_RX_DATA;
 1182              		.loc 1 191 27 is_stmt 0
 1183 0488 97070000 		la	a5,CONSOLE_RX_DATA
 1183      83B70700 
 1184 0490 83B70700 		ld	a5,0(a5)
 1185              	.LVL101:
 192:src/riscv.cpp ****                 myConsole::recieveFromKeyboard(ch);
 1186              		.loc 1 192 17 is_stmt 1
 192:src/riscv.cpp ****                 myConsole::recieveFromKeyboard(ch);
 1187              		.loc 1 192 47 is_stmt 0
 1188 0494 03C50700 		lbu	a0,0(a5)
 1189 0498 97000000 		call	_ZN9myConsole19recieveFromKeyboardEc@plt
 1189      E7800000 
 1190              	.LVL102:
 193:src/riscv.cpp ****                 status = *(char*)CONSOLE_STATUS;
 1191              		.loc 1 193 17 is_stmt 1
 193:src/riscv.cpp ****                 status = *(char*)CONSOLE_STATUS;
 1192              		.loc 1 193 24 is_stmt 0
 1193 04a0 83C70400 		lbu	a5,0(s1)
 1194              	.LVL103:
 1195              	.LBE77:
 190:src/riscv.cpp ****             while (CONSOLE_RX_STATUS_BIT & status){
 1196              		.loc 1 190 13
 1197 04a4 6FF0DFFD 		j	.L35
 1198              	.LBE76:
 1199              	.LBE82:
 1200              	.LBE70:
 1201              	.LBE98:
 1202              	.LBE120:
 1203              	.LBE124:
 1204              		.cfi_endproc
 1205              	.LFE92:
 1207              	.Letext0:
 1208              		.file 6 "src/../h/../lib/hw.h"
 1209              		.file 7 "src/../h/scheduler.hpp"
 1210              		.file 8 "src/../h/../h/memoryAllocator.hpp"
 1211              		.file 9 "src/../h/sleepingThreadList.hpp"
 1212              		.file 10 "src/../h/../h/syscall_c.hpp"
 1213              		.file 11 "src/../h/consoleBuffer.hpp"
 1214              		.file 12 "src/../h/myConsole.hpp"
 1215              		.file 13 "src/../h/print.hpp"
 1216              		.file 14 "src/../h/../h/syscall_cpp.hpp"
GAS LISTING /tmp/ccuwPHk3.s 			page 36


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccuwPHk3.s:8      .text:0000000000000000 _ZL24updateSemTimeBlockedListv
     /tmp/ccuwPHk3.s:12     .text:0000000000000000 .L0 
     /tmp/ccuwPHk3.s:13     .text:0000000000000000 .L0 
     /tmp/ccuwPHk3.s:14     .text:0000000000000004 .L0 
     /tmp/ccuwPHk3.s:19     .text:0000000000000014 .L0 
     /tmp/ccuwPHk3.s:20     .text:0000000000000014 .L0 
     /tmp/ccuwPHk3.s:21     .text:0000000000000014 .L0 
     /tmp/ccuwPHk3.s:22     .text:0000000000000014 .L0 
     /tmp/ccuwPHk3.s:24     .text:0000000000000018 .L0 
     /tmp/ccuwPHk3.s:26     .text:0000000000000018 .L0 
     /tmp/ccuwPHk3.s:27     .text:0000000000000018 .L0 
     /tmp/ccuwPHk3.s:31     .text:0000000000000024 .L0 
     /tmp/ccuwPHk3.s:33     .text:0000000000000028 .L0 
     /tmp/ccuwPHk3.s:34     .text:0000000000000028 .L0 
     /tmp/ccuwPHk3.s:36     .text:000000000000002c .L0 
     /tmp/ccuwPHk3.s:42     .text:0000000000000038 .L0 
     /tmp/ccuwPHk3.s:46     .text:000000000000003c .L0 
     /tmp/ccuwPHk3.s:47     .text:000000000000003c .L0 
     /tmp/ccuwPHk3.s:50     .text:0000000000000040 .L0 
     /tmp/ccuwPHk3.s:51     .text:0000000000000040 .L0 
     /tmp/ccuwPHk3.s:53     .text:0000000000000044 .L0 
     /tmp/ccuwPHk3.s:57     .text:0000000000000048 .L0 
     /tmp/ccuwPHk3.s:58     .text:0000000000000048 .L0 
     /tmp/ccuwPHk3.s:59     .text:0000000000000048 .L0 
     /tmp/ccuwPHk3.s:64     .text:0000000000000058 .L0 
     /tmp/ccuwPHk3.s:65     .text:0000000000000058 .L0 
     /tmp/ccuwPHk3.s:69     .text:0000000000000064 .L0 
     /tmp/ccuwPHk3.s:70     .text:0000000000000064 .L0 
     /tmp/ccuwPHk3.s:72     .text:0000000000000068 .L0 
     /tmp/ccuwPHk3.s:76     .text:0000000000000074 .L0 
     /tmp/ccuwPHk3.s:77     .text:0000000000000074 .L0 
     /tmp/ccuwPHk3.s:78     .text:0000000000000074 .L0 
     /tmp/ccuwPHk3.s:80     .text:0000000000000078 .L0 
     /tmp/ccuwPHk3.s:89     .text:0000000000000088 .L0 
     /tmp/ccuwPHk3.s:90     .text:000000000000008c .L0 
     /tmp/ccuwPHk3.s:92     .text:0000000000000090 .L0 
     /tmp/ccuwPHk3.s:93     .text:0000000000000090 .L0 
     /tmp/ccuwPHk3.s:95     .text:0000000000000094 .L0 
     /tmp/ccuwPHk3.s:98     .text:0000000000000098 .L0 
     /tmp/ccuwPHk3.s:100    .text:000000000000009c .L0 
     /tmp/ccuwPHk3.s:102    .text:00000000000000a0 .L0 
     /tmp/ccuwPHk3.s:108    .text:00000000000000a0 _ZN5Riscv10popSppSpieEv
     /tmp/ccuwPHk3.s:111    .text:00000000000000a0 .L0 
     /tmp/ccuwPHk3.s:112    .text:00000000000000a0 .L0 
     /tmp/ccuwPHk3.s:113    .text:00000000000000a4 .L0 
     /tmp/ccuwPHk3.s:115    .text:00000000000000a8 .L0 
     /tmp/ccuwPHk3.s:117    .text:00000000000000ac .L0 
     /tmp/ccuwPHk3.s:119    .text:00000000000000ac .L0 
       src/riscv.cpp:31     .text:00000000000000ac .L0 
     /tmp/ccuwPHk3.s:125    .text:00000000000000b0 .L0 
       src/riscv.cpp:32     .text:00000000000000b0 .L0 
     /tmp/ccuwPHk3.s:131    .text:00000000000000b4 .L0 
     /tmp/ccuwPHk3.s:132    .text:00000000000000b8 .L0 
     /tmp/ccuwPHk3.s:133    .text:00000000000000b8 .L0 
     /tmp/ccuwPHk3.s:135    .text:00000000000000bc .L0 
GAS LISTING /tmp/ccuwPHk3.s 			page 37


     /tmp/ccuwPHk3.s:137    .text:00000000000000c0 .L0 
     /tmp/ccuwPHk3.s:154    .text:00000000000000c0 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccuwPHk3.s:157    .text:00000000000000c0 .L0 
     /tmp/ccuwPHk3.s:158    .text:00000000000000c0 .L0 
     /tmp/ccuwPHk3.s:159    .text:00000000000000c4 .L0 
     /tmp/ccuwPHk3.s:165    .text:00000000000000d8 .L0 
     /tmp/ccuwPHk3.s:166    .text:00000000000000d8 .L0 
     /tmp/ccuwPHk3.s:167    .text:00000000000000d8 .L0 
     /tmp/ccuwPHk3.s:168    .text:00000000000000d8 .L0 
     /tmp/ccuwPHk3.s:169    .text:00000000000000d8 .L0 
     /tmp/ccuwPHk3.s:171    .text:00000000000000dc .L0 
     /tmp/ccuwPHk3.s:176    .text:00000000000000dc .L0 
     /tmp/ccuwPHk3.s:177    .text:00000000000000dc .L0 
     /tmp/ccuwPHk3.s:178    .text:00000000000000dc .L0 
  src/../h/riscv.hpp:92     .text:00000000000000dc .L0 
     /tmp/ccuwPHk3.s:186    .text:00000000000000e4 .L0 
     /tmp/ccuwPHk3.s:187    .text:00000000000000e4 .L0 
     /tmp/ccuwPHk3.s:193    .text:00000000000000e8 .L0 
     /tmp/ccuwPHk3.s:194    .text:00000000000000e8 .L0 
     /tmp/ccuwPHk3.s:196    .text:00000000000000ec .L0 
     /tmp/ccuwPHk3.s:202    .text:00000000000000f4 .L0 
     /tmp/ccuwPHk3.s:212    .text:0000000000000104 .L0 
     /tmp/ccuwPHk3.s:220    .text:0000000000000114 .L0 
     /tmp/ccuwPHk3.s:221    .text:0000000000000114 .L0 
     /tmp/ccuwPHk3.s:222    .text:0000000000000114 .L0 
  src/../h/riscv.hpp:104    .text:0000000000000114 .L0 
     /tmp/ccuwPHk3.s:230    .text:000000000000011c .L0 
     /tmp/ccuwPHk3.s:231    .text:000000000000011c .L0 
     /tmp/ccuwPHk3.s:236    .text:0000000000000120 .L0 
     /tmp/ccuwPHk3.s:237    .text:0000000000000120 .L0 
     /tmp/ccuwPHk3.s:241    .text:0000000000000130 .L0 
     /tmp/ccuwPHk3.s:242    .text:0000000000000130 .L0 
     /tmp/ccuwPHk3.s:246    .text:000000000000013c .L0 
     /tmp/ccuwPHk3.s:247    .text:000000000000013c .L0 
     /tmp/ccuwPHk3.s:251    .text:000000000000014c .L0 
     /tmp/ccuwPHk3.s:252    .text:000000000000014c .L0 
     /tmp/ccuwPHk3.s:256    .text:000000000000015c .L0 
     /tmp/ccuwPHk3.s:257    .text:000000000000015c .L0 
     /tmp/ccuwPHk3.s:261    .text:0000000000000168 .L0 
     /tmp/ccuwPHk3.s:262    .text:0000000000000168 .L0 
     /tmp/ccuwPHk3.s:270    .text:0000000000000178 .L0 
     /tmp/ccuwPHk3.s:278    .text:000000000000017c .L0 
     /tmp/ccuwPHk3.s:279    .text:000000000000017c .L0 
     /tmp/ccuwPHk3.s:280    .text:000000000000017c .L0 
  src/../h/riscv.hpp:104    .text:000000000000017c .L0 
     /tmp/ccuwPHk3.s:288    .text:0000000000000184 .L0 
     /tmp/ccuwPHk3.s:289    .text:0000000000000184 .L0 
     /tmp/ccuwPHk3.s:293    .text:0000000000000188 .L0 
     /tmp/ccuwPHk3.s:295    .text:000000000000018c .L0 
     /tmp/ccuwPHk3.s:299    .text:0000000000000190 .L0 
     /tmp/ccuwPHk3.s:300    .text:0000000000000190 .L0 
     /tmp/ccuwPHk3.s:301    .text:0000000000000190 .L0 
  src/../h/riscv.hpp:172    .text:0000000000000190 .L0 
     /tmp/ccuwPHk3.s:309    .text:0000000000000198 .L0 
     /tmp/ccuwPHk3.s:310    .text:0000000000000198 .L0 
     /tmp/ccuwPHk3.s:314    .text:000000000000019c .L0 
     /tmp/ccuwPHk3.s:316    .text:00000000000001a0 .L0 
GAS LISTING /tmp/ccuwPHk3.s 			page 38


     /tmp/ccuwPHk3.s:317    .text:00000000000001a0 .L0 
       src/riscv.cpp:46     .text:00000000000001a0 .L0 
     /tmp/ccuwPHk3.s:324    .text:00000000000001a4 .L0 
     /tmp/ccuwPHk3.s:325    .text:00000000000001a4 .L0 
     /tmp/ccuwPHk3.s:326    .text:00000000000001a4 .L0 
     /tmp/ccuwPHk3.s:327    .text:00000000000001a4 .L0 
     /tmp/ccuwPHk3.s:329    .text:00000000000001a4 .L0 
     /tmp/ccuwPHk3.s:414    .text:00000000000001c8 .L0 
     /tmp/ccuwPHk3.s:415    .text:00000000000001c8 .L0 
     /tmp/ccuwPHk3.s:416    .text:00000000000001c8 .L0 
       src/riscv.cpp:56     .text:00000000000001c8 .L0 
     /tmp/ccuwPHk3.s:423    .text:00000000000001cc .L0 
     /tmp/ccuwPHk3.s:425    .text:00000000000001cc .L0 
     /tmp/ccuwPHk3.s:428    .text:00000000000001d4 .L0 
       src/riscv.cpp:58     .text:00000000000001d4 .L0 
     /tmp/ccuwPHk3.s:434    .text:00000000000001d8 .L0 
       src/riscv.cpp:59     .text:00000000000001d8 .L0 
     /tmp/ccuwPHk3.s:444    .text:00000000000001dc .L0 
     /tmp/ccuwPHk3.s:445    .text:00000000000001dc .L0 
     /tmp/ccuwPHk3.s:446    .text:00000000000001dc .L0 
     /tmp/ccuwPHk3.s:451    .text:00000000000001e0 .L0 
  src/../h/riscv.hpp:178    .text:00000000000001e0 .L0 
     /tmp/ccuwPHk3.s:461    .text:00000000000001e4 .L0 
     /tmp/ccuwPHk3.s:462    .text:00000000000001e4 .L0 
     /tmp/ccuwPHk3.s:467    .text:00000000000001e8 .L0 
  src/../h/riscv.hpp:110    .text:00000000000001e8 .L0 
     /tmp/ccuwPHk3.s:480    .text:00000000000001ec .L0 
     /tmp/ccuwPHk3.s:481    .text:00000000000001f0 .L0 
     /tmp/ccuwPHk3.s:482    .text:00000000000001f0 .L0 
     /tmp/ccuwPHk3.s:484    .text:00000000000001f4 .L0 
     /tmp/ccuwPHk3.s:485    .text:00000000000001f4 .L0 
     /tmp/ccuwPHk3.s:487    .text:00000000000001f8 .L0 
     /tmp/ccuwPHk3.s:489    .text:00000000000001fc .L0 
     /tmp/ccuwPHk3.s:491    .text:0000000000000200 .L0 
     /tmp/ccuwPHk3.s:493    .text:0000000000000204 .L0 
     /tmp/ccuwPHk3.s:497    .text:0000000000000208 .L0 
     /tmp/ccuwPHk3.s:503    .text:0000000000000208 .L0 
     /tmp/ccuwPHk3.s:504    .text:0000000000000208 .L0 
     /tmp/ccuwPHk3.s:505    .text:0000000000000208 .L0 
       src/riscv.cpp:63     .text:0000000000000208 .L0 
     /tmp/ccuwPHk3.s:512    .text:000000000000020c .L0 
     /tmp/ccuwPHk3.s:514    .text:000000000000020c .L0 
     /tmp/ccuwPHk3.s:517    .text:0000000000000214 .L0 
       src/riscv.cpp:65     .text:0000000000000214 .L0 
     /tmp/ccuwPHk3.s:523    .text:0000000000000218 .L0 
       src/riscv.cpp:66     .text:0000000000000218 .L0 
     /tmp/ccuwPHk3.s:529    .text:000000000000021c .L0 
     /tmp/ccuwPHk3.s:533    .text:0000000000000220 .L0 
     /tmp/ccuwPHk3.s:534    .text:0000000000000220 .L0 
     /tmp/ccuwPHk3.s:535    .text:0000000000000220 .L0 
     /tmp/ccuwPHk3.s:536    .text:0000000000000220 .L0 
     /tmp/ccuwPHk3.s:537    .text:0000000000000220 .L0 
     /tmp/ccuwPHk3.s:538    .text:0000000000000220 .L0 
       src/riscv.cpp:73     .text:0000000000000220 .L0 
     /tmp/ccuwPHk3.s:545    .text:0000000000000224 .L0 
       src/riscv.cpp:74     .text:0000000000000224 .L0 
     /tmp/ccuwPHk3.s:551    .text:0000000000000228 .L0 
GAS LISTING /tmp/ccuwPHk3.s 			page 39


       src/riscv.cpp:75     .text:0000000000000228 .L0 
     /tmp/ccuwPHk3.s:557    .text:000000000000022c .L0 
       src/riscv.cpp:76     .text:000000000000022c .L0 
     /tmp/ccuwPHk3.s:563    .text:0000000000000230 .L0 
     /tmp/ccuwPHk3.s:565    .text:0000000000000230 .L0 
     /tmp/ccuwPHk3.s:568    .text:0000000000000238 .L0 
       src/riscv.cpp:78     .text:0000000000000238 .L0 
     /tmp/ccuwPHk3.s:574    .text:000000000000023c .L0 
       src/riscv.cpp:79     .text:000000000000023c .L0 
     /tmp/ccuwPHk3.s:580    .text:0000000000000240 .L0 
     /tmp/ccuwPHk3.s:584    .text:0000000000000244 .L0 
     /tmp/ccuwPHk3.s:588    .text:0000000000000244 .L0 
     /tmp/ccuwPHk3.s:589    .text:0000000000000244 .L0 
     /tmp/ccuwPHk3.s:590    .text:0000000000000244 .L0 
     /tmp/ccuwPHk3.s:593    .text:0000000000000250 .L0 
     /tmp/ccuwPHk3.s:596    .text:0000000000000258 .L0 
     /tmp/ccuwPHk3.s:597    .text:0000000000000258 .L0 
     /tmp/ccuwPHk3.s:602    .text:0000000000000260 .L0 
     /tmp/ccuwPHk3.s:603    .text:0000000000000260 .L0 
     /tmp/ccuwPHk3.s:604    .text:0000000000000260 .L0 
     /tmp/ccuwPHk3.s:610    .text:0000000000000268 .L0 
       src/riscv.cpp:84     .text:0000000000000268 .L0 
     /tmp/ccuwPHk3.s:616    .text:000000000000026c .L0 
     /tmp/ccuwPHk3.s:620    .text:0000000000000270 .L0 
     /tmp/ccuwPHk3.s:621    .text:0000000000000270 .L0 
     /tmp/ccuwPHk3.s:622    .text:0000000000000270 .L0 
     /tmp/ccuwPHk3.s:625    .text:0000000000000278 .L0 
     /tmp/ccuwPHk3.s:628    .text:000000000000027c .L0 
     /tmp/ccuwPHk3.s:629    .text:000000000000027c .L0 
     /tmp/ccuwPHk3.s:630    .text:000000000000027c .L0 
     /tmp/ccuwPHk3.s:631    .text:000000000000027c .L0 
       src/riscv.cpp:92     .text:000000000000027c .L0 
     /tmp/ccuwPHk3.s:638    .text:0000000000000280 .L0 
       src/riscv.cpp:93     .text:0000000000000280 .L0 
     /tmp/ccuwPHk3.s:647    .text:0000000000000288 .L0 
     /tmp/ccuwPHk3.s:648    .text:0000000000000288 .L0 
     /tmp/ccuwPHk3.s:649    .text:0000000000000288 .L0 
     /tmp/ccuwPHk3.s:656    .text:0000000000000294 .L0 
     /tmp/ccuwPHk3.s:665    .text:00000000000002a0 .L0 
     /tmp/ccuwPHk3.s:672    .text:00000000000002ac .L0 
     /tmp/ccuwPHk3.s:677    .text:00000000000002b0 .L0 
     /tmp/ccuwPHk3.s:679    .text:00000000000002b4 .L0 
     /tmp/ccuwPHk3.s:680    .text:00000000000002b4 .L0 
     /tmp/ccuwPHk3.s:683    .text:00000000000002b8 .L0 
     /tmp/ccuwPHk3.s:684    .text:00000000000002b8 .L0 
     /tmp/ccuwPHk3.s:688    .text:00000000000002bc .L0 
       src/riscv.cpp:102    .text:00000000000002bc .L0 
     /tmp/ccuwPHk3.s:694    .text:00000000000002c0 .L0 
       src/riscv.cpp:103    .text:00000000000002c0 .L0 
     /tmp/ccuwPHk3.s:700    .text:00000000000002c4 .L0 
     /tmp/ccuwPHk3.s:704    .text:00000000000002c8 .L0 
     /tmp/ccuwPHk3.s:709    .text:00000000000002d0 .L0 
     /tmp/ccuwPHk3.s:710    .text:00000000000002d0 .L0 
       src/riscv.cpp:106    .text:00000000000002d0 .L0 
     /tmp/ccuwPHk3.s:718    .text:00000000000002d4 .L0 
     /tmp/ccuwPHk3.s:720    .text:00000000000002d8 .L0 
     /tmp/ccuwPHk3.s:721    .text:00000000000002d8 .L0 
GAS LISTING /tmp/ccuwPHk3.s 			page 40


     /tmp/ccuwPHk3.s:728    .text:00000000000002f0 .L0 
     /tmp/ccuwPHk3.s:729    .text:00000000000002f0 .L0 
     /tmp/ccuwPHk3.s:733    .text:00000000000002f4 .L0 
       src/riscv.cpp:113    .text:00000000000002f4 .L0 
     /tmp/ccuwPHk3.s:739    .text:00000000000002f8 .L0 
       src/riscv.cpp:114    .text:00000000000002f8 .L0 
     /tmp/ccuwPHk3.s:745    .text:00000000000002fc .L0 
     /tmp/ccuwPHk3.s:749    .text:0000000000000300 .L0 
     /tmp/ccuwPHk3.s:754    .text:0000000000000308 .L0 
     /tmp/ccuwPHk3.s:755    .text:0000000000000308 .L0 
       src/riscv.cpp:117    .text:0000000000000308 .L0 
     /tmp/ccuwPHk3.s:762    .text:000000000000030c .L0 
     /tmp/ccuwPHk3.s:764    .text:000000000000030c .L0 
     /tmp/ccuwPHk3.s:767    .text:0000000000000314 .L0 
       src/riscv.cpp:119    .text:0000000000000314 .L0 
     /tmp/ccuwPHk3.s:773    .text:0000000000000318 .L0 
       src/riscv.cpp:120    .text:0000000000000318 .L0 
     /tmp/ccuwPHk3.s:779    .text:000000000000031c .L0 
     /tmp/ccuwPHk3.s:783    .text:0000000000000320 .L0 
     /tmp/ccuwPHk3.s:784    .text:0000000000000320 .L0 
       src/riscv.cpp:123    .text:0000000000000320 .L0 
     /tmp/ccuwPHk3.s:791    .text:0000000000000324 .L0 
     /tmp/ccuwPHk3.s:793    .text:0000000000000324 .L0 
     /tmp/ccuwPHk3.s:796    .text:000000000000032c .L0 
       src/riscv.cpp:125    .text:000000000000032c .L0 
     /tmp/ccuwPHk3.s:802    .text:0000000000000330 .L0 
       src/riscv.cpp:126    .text:0000000000000330 .L0 
     /tmp/ccuwPHk3.s:808    .text:0000000000000334 .L0 
     /tmp/ccuwPHk3.s:812    .text:0000000000000338 .L0 
     /tmp/ccuwPHk3.s:813    .text:0000000000000338 .L0 
     /tmp/ccuwPHk3.s:814    .text:0000000000000338 .L0 
       src/riscv.cpp:130    .text:0000000000000338 .L0 
     /tmp/ccuwPHk3.s:821    .text:000000000000033c .L0 
       src/riscv.cpp:131    .text:000000000000033c .L0 
     /tmp/ccuwPHk3.s:827    .text:0000000000000340 .L0 
     /tmp/ccuwPHk3.s:829    .text:0000000000000340 .L0 
     /tmp/ccuwPHk3.s:832    .text:0000000000000348 .L0 
       src/riscv.cpp:133    .text:0000000000000348 .L0 
     /tmp/ccuwPHk3.s:838    .text:000000000000034c .L0 
       src/riscv.cpp:134    .text:000000000000034c .L0 
     /tmp/ccuwPHk3.s:844    .text:0000000000000350 .L0 
     /tmp/ccuwPHk3.s:848    .text:0000000000000354 .L0 
     /tmp/ccuwPHk3.s:849    .text:0000000000000354 .L0 
       src/riscv.cpp:137    .text:0000000000000354 .L0 
     /tmp/ccuwPHk3.s:856    .text:0000000000000358 .L0 
     /tmp/ccuwPHk3.s:858    .text:0000000000000358 .L0 
     /tmp/ccuwPHk3.s:861    .text:0000000000000360 .L0 
       src/riscv.cpp:139    .text:0000000000000360 .L0 
     /tmp/ccuwPHk3.s:867    .text:0000000000000364 .L0 
       src/riscv.cpp:140    .text:0000000000000364 .L0 
     /tmp/ccuwPHk3.s:873    .text:0000000000000368 .L0 
     /tmp/ccuwPHk3.s:877    .text:000000000000036c .L0 
     /tmp/ccuwPHk3.s:878    .text:000000000000036c .L0 
     /tmp/ccuwPHk3.s:879    .text:000000000000036c .L0 
       src/riscv.cpp:144    .text:000000000000036c .L0 
     /tmp/ccuwPHk3.s:886    .text:0000000000000370 .L0 
     /tmp/ccuwPHk3.s:888    .text:0000000000000370 .L0 
GAS LISTING /tmp/ccuwPHk3.s 			page 41


     /tmp/ccuwPHk3.s:891    .text:0000000000000378 .L0 
       src/riscv.cpp:146    .text:0000000000000378 .L0 
     /tmp/ccuwPHk3.s:897    .text:000000000000037c .L0 
       src/riscv.cpp:147    .text:000000000000037c .L0 
     /tmp/ccuwPHk3.s:903    .text:0000000000000380 .L0 
     /tmp/ccuwPHk3.s:907    .text:0000000000000384 .L0 
     /tmp/ccuwPHk3.s:908    .text:0000000000000384 .L0 
     /tmp/ccuwPHk3.s:909    .text:0000000000000384 .L0 
     /tmp/ccuwPHk3.s:912    .text:000000000000038c .L0 
     /tmp/ccuwPHk3.s:914    .text:0000000000000390 .L0 
     /tmp/ccuwPHk3.s:918    .text:0000000000000394 .L0 
       src/riscv.cpp:152    .text:0000000000000394 .L0 
     /tmp/ccuwPHk3.s:924    .text:0000000000000398 .L0 
       src/riscv.cpp:153    .text:0000000000000398 .L0 
     /tmp/ccuwPHk3.s:930    .text:000000000000039c .L0 
     /tmp/ccuwPHk3.s:934    .text:00000000000003a0 .L0 
     /tmp/ccuwPHk3.s:935    .text:00000000000003a0 .L0 
       src/riscv.cpp:156    .text:00000000000003a0 .L0 
     /tmp/ccuwPHk3.s:942    .text:00000000000003a4 .L0 
     /tmp/ccuwPHk3.s:944    .text:00000000000003a4 .L0 
     /tmp/ccuwPHk3.s:948    .text:00000000000003b0 .L0 
     /tmp/ccuwPHk3.s:959    .text:00000000000003b4 .L0 
     /tmp/ccuwPHk3.s:960    .text:00000000000003b4 .L0 
     /tmp/ccuwPHk3.s:961    .text:00000000000003b4 .L0 
     /tmp/ccuwPHk3.s:971    .text:00000000000003bc .L0 
     /tmp/ccuwPHk3.s:972    .text:00000000000003bc .L0 
     /tmp/ccuwPHk3.s:975    .text:00000000000003c4 .L0 
     /tmp/ccuwPHk3.s:976    .text:00000000000003c4 .L0 
     /tmp/ccuwPHk3.s:979    .text:00000000000003cc .L0 
     /tmp/ccuwPHk3.s:980    .text:00000000000003cc .L0 
     /tmp/ccuwPHk3.s:985    .text:00000000000003e0 .L0 
     /tmp/ccuwPHk3.s:986    .text:00000000000003e0 .L0 
     /tmp/ccuwPHk3.s:992    .text:00000000000003ec .L0 
     /tmp/ccuwPHk3.s:993    .text:00000000000003ec .L0 
     /tmp/ccuwPHk3.s:999    .text:00000000000003f0 .L0 
     /tmp/ccuwPHk3.s:1004   .text:00000000000003f4 .L0 
     /tmp/ccuwPHk3.s:1005   .text:00000000000003f4 .L0 
     /tmp/ccuwPHk3.s:1006   .text:00000000000003f4 .L0 
  src/../h/riscv.hpp:104    .text:00000000000003f4 .L0 
     /tmp/ccuwPHk3.s:1014   .text:00000000000003fc .L0 
     /tmp/ccuwPHk3.s:1015   .text:00000000000003fc .L0 
     /tmp/ccuwPHk3.s:1019   .text:0000000000000400 .L0 
     /tmp/ccuwPHk3.s:1023   .text:0000000000000404 .L0 
     /tmp/ccuwPHk3.s:1024   .text:0000000000000404 .L0 
     /tmp/ccuwPHk3.s:1025   .text:0000000000000404 .L0 
  src/../h/riscv.hpp:172    .text:0000000000000404 .L0 
     /tmp/ccuwPHk3.s:1033   .text:000000000000040c .L0 
     /tmp/ccuwPHk3.s:1034   .text:000000000000040c .L0 
     /tmp/ccuwPHk3.s:1038   .text:0000000000000410 .L0 
     /tmp/ccuwPHk3.s:1040   .text:0000000000000414 .L0 
     /tmp/ccuwPHk3.s:1041   .text:0000000000000414 .L0 
     /tmp/ccuwPHk3.s:1044   .text:000000000000041c .L0 
     /tmp/ccuwPHk3.s:1045   .text:000000000000041c .L0 
     /tmp/ccuwPHk3.s:1050   .text:0000000000000420 .L0 
  src/../h/riscv.hpp:178    .text:0000000000000420 .L0 
     /tmp/ccuwPHk3.s:1060   .text:0000000000000424 .L0 
     /tmp/ccuwPHk3.s:1061   .text:0000000000000424 .L0 
GAS LISTING /tmp/ccuwPHk3.s 			page 42


     /tmp/ccuwPHk3.s:1066   .text:0000000000000428 .L0 
  src/../h/riscv.hpp:110    .text:0000000000000428 .L0 
     /tmp/ccuwPHk3.s:1073   .text:000000000000042c .L0 
     /tmp/ccuwPHk3.s:1086   .text:0000000000000430 .L0 
     /tmp/ccuwPHk3.s:1087   .text:0000000000000430 .L0 
     /tmp/ccuwPHk3.s:1088   .text:0000000000000430 .L0 
  src/../h/riscv.hpp:104    .text:0000000000000430 .L0 
     /tmp/ccuwPHk3.s:1096   .text:0000000000000438 .L0 
     /tmp/ccuwPHk3.s:1097   .text:0000000000000438 .L0 
     /tmp/ccuwPHk3.s:1104   .text:000000000000043c .L0 
     /tmp/ccuwPHk3.s:1105   .text:000000000000043c .L0 
     /tmp/ccuwPHk3.s:1106   .text:000000000000043c .L0 
  src/../h/riscv.hpp:172    .text:000000000000043c .L0 
     /tmp/ccuwPHk3.s:1114   .text:0000000000000444 .L0 
     /tmp/ccuwPHk3.s:1115   .text:0000000000000444 .L0 
     /tmp/ccuwPHk3.s:1121   .text:0000000000000448 .L0 
     /tmp/ccuwPHk3.s:1122   .text:0000000000000448 .L0 
     /tmp/ccuwPHk3.s:1125   .text:0000000000000450 .L0 
     /tmp/ccuwPHk3.s:1131   .text:0000000000000458 .L0 
     /tmp/ccuwPHk3.s:1132   .text:0000000000000458 .L0 
     /tmp/ccuwPHk3.s:1138   .text:0000000000000464 .L0 
     /tmp/ccuwPHk3.s:1139   .text:0000000000000464 .L0 
  src/../h/riscv.hpp:178    .text:0000000000000464 .L0 
     /tmp/ccuwPHk3.s:1151   .text:0000000000000468 .L0 
     /tmp/ccuwPHk3.s:1152   .text:0000000000000468 .L0 
  src/../h/riscv.hpp:110    .text:0000000000000468 .L0 
     /tmp/ccuwPHk3.s:1159   .text:000000000000046c .L0 
     /tmp/ccuwPHk3.s:1167   .text:0000000000000470 .L0 
     /tmp/ccuwPHk3.s:1168   .text:0000000000000470 .L0 
     /tmp/ccuwPHk3.s:1172   .text:000000000000047c .L0 
     /tmp/ccuwPHk3.s:1176   .text:0000000000000480 .L0 
     /tmp/ccuwPHk3.s:1177   .text:0000000000000480 .L0 
     /tmp/ccuwPHk3.s:1182   .text:0000000000000488 .L0 
     /tmp/ccuwPHk3.s:1183   .text:0000000000000488 .L0 
     /tmp/ccuwPHk3.s:1187   .text:0000000000000494 .L0 
     /tmp/ccuwPHk3.s:1188   .text:0000000000000494 .L0 
     /tmp/ccuwPHk3.s:1192   .text:00000000000004a0 .L0 
     /tmp/ccuwPHk3.s:1193   .text:00000000000004a0 .L0 
     /tmp/ccuwPHk3.s:1197   .text:00000000000004a4 .L0 
     /tmp/ccuwPHk3.s:1204   .text:00000000000004a8 .L0 
     /tmp/ccuwPHk3.s:1217   .text:00000000000004a8 .L0 
     /tmp/ccuwPHk3.s:27     .text:0000000000000018 .L0 
     /tmp/ccuwPHk3.s:72     .text:0000000000000068 .L0 
     /tmp/ccuwPHk3.s:142    .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccuwPHk3.s:237    .text:0000000000000120 .L0 
     /tmp/ccuwPHk3.s:145    .rodata.str1.8:0000000000000010 .LC1
     /tmp/ccuwPHk3.s:247    .text:000000000000013c .L0 
     /tmp/ccuwPHk3.s:148    .rodata.str1.8:0000000000000018 .LC2
     /tmp/ccuwPHk3.s:252    .text:000000000000014c .L0 
     /tmp/ccuwPHk3.s:262    .text:0000000000000168 .L0 
     /tmp/ccuwPHk3.s:341    .rodata:0000000000000000 .L14
     /tmp/ccuwPHk3.s:333    .text:00000000000001b0 .L0 
     /tmp/ccuwPHk3.s:590    .text:0000000000000244 .L0 
     /tmp/ccuwPHk3.s:980    .text:00000000000003cc .L0 
     /tmp/ccuwPHk3.s:986    .text:00000000000003e0 .L0 
     /tmp/ccuwPHk3.s:1168   .text:0000000000000470 .L0 
     /tmp/ccuwPHk3.s:1183   .text:0000000000000488 .L0 
GAS LISTING /tmp/ccuwPHk3.s 			page 43


     /tmp/ccuwPHk3.s:44     .text:000000000000003c .L5
     /tmp/ccuwPHk3.s:85     .text:0000000000000088 .L1
     /tmp/ccuwPHk3.s:40     .text:0000000000000038 .L6
     /tmp/ccuwPHk3.s:272    .text:000000000000017c .L40
     /tmp/ccuwPHk3.s:949    .text:00000000000003b4 .L41
     /tmp/ccuwPHk3.s:1075   .text:0000000000000430 .L42
     /tmp/ccuwPHk3.s:474    .text:00000000000001ec .L10
     /tmp/ccuwPHk3.s:441    .text:00000000000001dc .L12
     /tmp/ccuwPHk3.s:702    .text:00000000000002c8 .L36
     /tmp/ccuwPHk3.s:686    .text:00000000000002bc .L28
     /tmp/ccuwPHk3.s:747    .text:0000000000000300 .L37
     /tmp/ccuwPHk3.s:731    .text:00000000000002f4 .L29
     /tmp/ccuwPHk3.s:916    .text:0000000000000394 .L30
     /tmp/ccuwPHk3.s:1161   .text:0000000000000470 .L43
     /tmp/ccuwPHk3.s:1128   .text:0000000000000458 .L34
     /tmp/ccuwPHk3.s:1174   .text:0000000000000480 .L35
     /tmp/ccuwPHk3.s:410    .text:00000000000001c8 .L27
     /tmp/ccuwPHk3.s:496    .text:0000000000000208 .L26
     /tmp/ccuwPHk3.s:531    .text:0000000000000220 .L25
     /tmp/ccuwPHk3.s:582    .text:0000000000000244 .L24
     /tmp/ccuwPHk3.s:618    .text:0000000000000270 .L23
     /tmp/ccuwPHk3.s:626    .text:000000000000027c .L22
     /tmp/ccuwPHk3.s:707    .text:00000000000002d0 .L21
     /tmp/ccuwPHk3.s:752    .text:0000000000000308 .L20
     /tmp/ccuwPHk3.s:781    .text:0000000000000320 .L19
     /tmp/ccuwPHk3.s:810    .text:0000000000000338 .L18
     /tmp/ccuwPHk3.s:846    .text:0000000000000354 .L17
     /tmp/ccuwPHk3.s:875    .text:000000000000036c .L16
     /tmp/ccuwPHk3.s:905    .text:0000000000000384 .L15
     /tmp/ccuwPHk3.s:932    .text:00000000000003a0 .L13
     /tmp/ccuwPHk3.s:4011   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccuwPHk3.s:6180   .debug_str:0000000000000d2a .LASF266
     /tmp/ccuwPHk3.s:6268   .debug_str:000000000000107c .LASF267
     /tmp/ccuwPHk3.s:5896   .debug_str:000000000000048f .LASF268
     /tmp/ccuwPHk3.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccuwPHk3.s:1207   .text:00000000000004a8 .Letext0
     /tmp/ccuwPHk3.s:5748   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccuwPHk3.s:5930   .debug_str:00000000000005b0 .LASF0
     /tmp/ccuwPHk3.s:5964   .debug_str:00000000000006cc .LASF1
     /tmp/ccuwPHk3.s:6100   .debug_str:0000000000000acf .LASF2
     /tmp/ccuwPHk3.s:5870   .debug_str:00000000000003da .LASF3
     /tmp/ccuwPHk3.s:6110   .debug_str:0000000000000b2a .LASF4
     /tmp/ccuwPHk3.s:5944   .debug_str:0000000000000607 .LASF5
     /tmp/ccuwPHk3.s:5766   .debug_str:0000000000000096 .LASF6
     /tmp/ccuwPHk3.s:6066   .debug_str:00000000000009ed .LASF7
     /tmp/ccuwPHk3.s:6052   .debug_str:000000000000096d .LASF8
     /tmp/ccuwPHk3.s:5956   .debug_str:0000000000000693 .LASF9
     /tmp/ccuwPHk3.s:5890   .debug_str:0000000000000461 .LASF10
     /tmp/ccuwPHk3.s:5906   .debug_str:00000000000004fd .LASF11
     /tmp/ccuwPHk3.s:5816   .debug_str:0000000000000217 .LASF12
     /tmp/ccuwPHk3.s:5880   .debug_str:0000000000000430 .LASF13
     /tmp/ccuwPHk3.s:5830   .debug_str:000000000000027b .LASF14
     /tmp/ccuwPHk3.s:5814   .debug_str:0000000000000207 .LASF15
     /tmp/ccuwPHk3.s:6152   .debug_str:0000000000000c51 .LASF16
     /tmp/ccuwPHk3.s:5860   .debug_str:000000000000037e .LASF17
     /tmp/ccuwPHk3.s:6138   .debug_str:0000000000000c0a .LASF18
     /tmp/ccuwPHk3.s:6248   .debug_str:0000000000000fe6 .LASF62
GAS LISTING /tmp/ccuwPHk3.s 			page 44


     /tmp/ccuwPHk3.s:6084   .debug_str:0000000000000a7c .LASF269
     /tmp/ccuwPHk3.s:5970   .debug_str:00000000000006f2 .LASF19
     /tmp/ccuwPHk3.s:5774   .debug_str:00000000000000db .LASF20
     /tmp/ccuwPHk3.s:6272   .debug_str:0000000000001090 .LASF21
     /tmp/ccuwPHk3.s:6120   .debug_str:0000000000000b64 .LASF22
     /tmp/ccuwPHk3.s:5866   .debug_str:00000000000003a0 .LASF24
     /tmp/ccuwPHk3.s:5932   .debug_str:00000000000005bd .LASF23
     /tmp/ccuwPHk3.s:6264   .debug_str:000000000000105a .LASF25
     /tmp/ccuwPHk3.s:5916   .debug_str:0000000000000540 .LASF26
     /tmp/ccuwPHk3.s:5926   .debug_str:0000000000000592 .LASF27
     /tmp/ccuwPHk3.s:6220   .debug_str:0000000000000f2e .LASF28
     /tmp/ccuwPHk3.s:6204   .debug_str:0000000000000ebd .LASF30
     /tmp/ccuwPHk3.s:6096   .debug_str:0000000000000abb .LASF32
     /tmp/ccuwPHk3.s:6032   .debug_str:00000000000008f5 .LASF34
     /tmp/ccuwPHk3.s:6076   .debug_str:0000000000000a36 .LASF29
     /tmp/ccuwPHk3.s:6080   .debug_str:0000000000000a55 .LASF31
     /tmp/ccuwPHk3.s:6024   .debug_str:00000000000008b8 .LASF33
     /tmp/ccuwPHk3.s:5958   .debug_str:00000000000006a6 .LASF35
     /tmp/ccuwPHk3.s:6266   .debug_str:0000000000001074 .LASF36
     /tmp/ccuwPHk3.s:6186   .debug_str:0000000000000e0a .LASF37
     /tmp/ccuwPHk3.s:6016   .debug_str:000000000000087d .LASF38
     /tmp/ccuwPHk3.s:6030   .debug_str:00000000000008e1 .LASF39
     /tmp/ccuwPHk3.s:5976   .debug_str:0000000000000722 .LASF40
     /tmp/ccuwPHk3.s:6082   .debug_str:0000000000000a68 .LASF41
     /tmp/ccuwPHk3.s:6304   .debug_str:00000000000011d0 .LASF42
     /tmp/ccuwPHk3.s:5936   .debug_str:00000000000005d0 .LASF43
     /tmp/ccuwPHk3.s:6148   .debug_str:0000000000000c3d .LASF44
     /tmp/ccuwPHk3.s:6116   .debug_str:0000000000000b4a .LASF45
     /tmp/ccuwPHk3.s:6118   .debug_str:0000000000000b5d .LASF46
     /tmp/ccuwPHk3.s:5820   .debug_str:000000000000022b .LASF47
     /tmp/ccuwPHk3.s:5852   .debug_str:000000000000032c .LASF48
     /tmp/ccuwPHk3.s:5924   .debug_str:0000000000000580 .LASF49
     /tmp/ccuwPHk3.s:5934   .debug_str:00000000000005ca .LASF50
     /tmp/ccuwPHk3.s:5840   .debug_str:00000000000002c8 .LASF51
     /tmp/ccuwPHk3.s:5768   .debug_str:000000000000009d .LASF52
     /tmp/ccuwPHk3.s:6106   .debug_str:0000000000000afd .LASF53
     /tmp/ccuwPHk3.s:6098   .debug_str:0000000000000ac4 .LASF54
     /tmp/ccuwPHk3.s:6298   .debug_str:0000000000001196 .LASF55
     /tmp/ccuwPHk3.s:6250   .debug_str:0000000000000fec .LASF56
     /tmp/ccuwPHk3.s:6278   .debug_str:00000000000010c8 .LASF57
     /tmp/ccuwPHk3.s:6246   .debug_str:0000000000000fdc .LASF58
     /tmp/ccuwPHk3.s:5998   .debug_str:00000000000007c5 .LASF59
     /tmp/ccuwPHk3.s:6212   .debug_str:0000000000000f08 .LASF60
     /tmp/ccuwPHk3.s:5904   .debug_str:00000000000004e1 .LASF61
     /tmp/ccuwPHk3.s:6056   .debug_str:00000000000009a7 .LASF115
     /tmp/ccuwPHk3.s:5952   .debug_str:0000000000000652 .LASF117
     /tmp/ccuwPHk3.s:5888   .debug_str:0000000000000457 .LASF63
     /tmp/ccuwPHk3.s:6288   .debug_str:0000000000001156 .LASF270
     /tmp/ccuwPHk3.s:5922   .debug_str:0000000000000568 .LASF271
     /tmp/ccuwPHk3.s:6112   .debug_str:0000000000000b31 .LASF64
     /tmp/ccuwPHk3.s:5764   .debug_str:000000000000008a .LASF66
     /tmp/ccuwPHk3.s:6162   .debug_str:0000000000000c7e .LASF68
     /tmp/ccuwPHk3.s:6014   .debug_str:0000000000000866 .LASF70
     /tmp/ccuwPHk3.s:5792   .debug_str:0000000000000148 .LASF65
     /tmp/ccuwPHk3.s:6208   .debug_str:0000000000000ee3 .LASF67
     /tmp/ccuwPHk3.s:5988   .debug_str:000000000000075e .LASF69
     /tmp/ccuwPHk3.s:6228   .debug_str:0000000000000f54 .LASF71
GAS LISTING /tmp/ccuwPHk3.s 			page 45


     /tmp/ccuwPHk3.s:5804   .debug_str:000000000000019f .LASF72
     /tmp/ccuwPHk3.s:6258   .debug_str:0000000000001026 .LASF73
     /tmp/ccuwPHk3.s:6236   .debug_str:0000000000000fac .LASF74
     /tmp/ccuwPHk3.s:6102   .debug_str:0000000000000add .LASF75
     /tmp/ccuwPHk3.s:5798   .debug_str:0000000000000173 .LASF76
     /tmp/ccuwPHk3.s:6020   .debug_str:000000000000088a .LASF77
     /tmp/ccuwPHk3.s:6200   .debug_str:0000000000000e93 .LASF78
     /tmp/ccuwPHk3.s:6026   .debug_str:00000000000008bf .LASF79
     /tmp/ccuwPHk3.s:5986   .debug_str:0000000000000757 .LASF80
     /tmp/ccuwPHk3.s:5942   .debug_str:00000000000005f6 .LASF81
     /tmp/ccuwPHk3.s:6150   .debug_str:0000000000000c44 .LASF82
     /tmp/ccuwPHk3.s:5992   .debug_str:0000000000000777 .LASF83
     /tmp/ccuwPHk3.s:6040   .debug_str:0000000000000922 .LASF272
     /tmp/ccuwPHk3.s:5990   .debug_str:000000000000076b .LASF84
     /tmp/ccuwPHk3.s:5878   .debug_str:0000000000000419 .LASF85
     /tmp/ccuwPHk3.s:6244   .debug_str:0000000000000fd1 .LASF86
     /tmp/ccuwPHk3.s:6296   .debug_str:0000000000001180 .LASF87
     /tmp/ccuwPHk3.s:5848   .debug_str:00000000000002f5 .LASF88
     /tmp/ccuwPHk3.s:5850   .debug_str:000000000000030b .LASF89
     /tmp/ccuwPHk3.s:6104   .debug_str:0000000000000af3 .LASF90
     /tmp/ccuwPHk3.s:5802   .debug_str:000000000000018a .LASF91
     /tmp/ccuwPHk3.s:6166   .debug_str:0000000000000cb7 .LASF92
     /tmp/ccuwPHk3.s:5876   .debug_str:0000000000000403 .LASF93
     /tmp/ccuwPHk3.s:6176   .debug_str:0000000000000d10 .LASF102
     /tmp/ccuwPHk3.s:6300   .debug_str:00000000000011ae .LASF94
     /tmp/ccuwPHk3.s:5900   .debug_str:00000000000004cb .LASF95
     /tmp/ccuwPHk3.s:5800   .debug_str:000000000000017a .LASF96
     /tmp/ccuwPHk3.s:5886   .debug_str:000000000000044b .LASF97
     /tmp/ccuwPHk3.s:5758   .debug_str:0000000000000050 .LASF98
     /tmp/ccuwPHk3.s:5984   .debug_str:000000000000074a .LASF99
     /tmp/ccuwPHk3.s:6136   .debug_str:0000000000000bf7 .LASF100
     /tmp/ccuwPHk3.s:5914   .debug_str:0000000000000533 .LASF101
     /tmp/ccuwPHk3.s:5756   .debug_str:000000000000004b .LASF103
     /tmp/ccuwPHk3.s:6270   .debug_str:000000000000108a .LASF104
     /tmp/ccuwPHk3.s:6294   .debug_str:000000000000117a .LASF105
     /tmp/ccuwPHk3.s:5862   .debug_str:0000000000000394 .LASF106
     /tmp/ccuwPHk3.s:6190   .debug_str:0000000000000e2e .LASF107
     /tmp/ccuwPHk3.s:6158   .debug_str:0000000000000c6c .LASF108
     /tmp/ccuwPHk3.s:5818   .debug_str:0000000000000226 .LASF109
     /tmp/ccuwPHk3.s:6068   .debug_str:00000000000009f4 .LASF110
     /tmp/ccuwPHk3.s:5834   .debug_str:00000000000002a5 .LASF111
     /tmp/ccuwPHk3.s:6122   .debug_str:0000000000000b72 .LASF112
     /tmp/ccuwPHk3.s:6018   .debug_str:0000000000000885 .LASF113
     /tmp/ccuwPHk3.s:6188   .debug_str:0000000000000e1e .LASF114
     /tmp/ccuwPHk3.s:6060   .debug_str:00000000000009c5 .LASF116
     /tmp/ccuwPHk3.s:5972   .debug_str:00000000000006fb .LASF118
     /tmp/ccuwPHk3.s:5842   .debug_str:00000000000002da .LASF119
     /tmp/ccuwPHk3.s:5824   .debug_str:0000000000000249 .LASF120
     /tmp/ccuwPHk3.s:6128   .debug_str:0000000000000bb9 .LASF159
     /tmp/ccuwPHk3.s:5962   .debug_str:00000000000006c7 .LASF121
     /tmp/ccuwPHk3.s:5778   .debug_str:00000000000000fc .LASF122
     /tmp/ccuwPHk3.s:6046   .debug_str:0000000000000942 .LASF123
     /tmp/ccuwPHk3.s:6058   .debug_str:00000000000009bc .LASF124
     /tmp/ccuwPHk3.s:6042   .debug_str:0000000000000927 .LASF125
     /tmp/ccuwPHk3.s:5908   .debug_str:000000000000050b .LASF273
     /tmp/ccuwPHk3.s:6000   .debug_str:00000000000007db .LASF126
     /tmp/ccuwPHk3.s:5770   .debug_str:00000000000000a8 .LASF127
GAS LISTING /tmp/ccuwPHk3.s 			page 46


     /tmp/ccuwPHk3.s:6160   .debug_str:0000000000000c75 .LASF128
     /tmp/ccuwPHk3.s:6002   .debug_str:00000000000007e5 .LASF129
     /tmp/ccuwPHk3.s:5940   .debug_str:00000000000005ec .LASF130
     /tmp/ccuwPHk3.s:6164   .debug_str:0000000000000c89 .LASF131
     /tmp/ccuwPHk3.s:5822   .debug_str:000000000000023e .LASF132
     /tmp/ccuwPHk3.s:6192   .debug_str:0000000000000e38 .LASF133
     /tmp/ccuwPHk3.s:6028   .debug_str:00000000000008d6 .LASF134
     /tmp/ccuwPHk3.s:5968   .debug_str:00000000000006e9 .LASF135
     /tmp/ccuwPHk3.s:6292   .debug_str:0000000000001175 .LASF136
     /tmp/ccuwPHk3.s:6144   .debug_str:0000000000000c2e .LASF137
     /tmp/ccuwPHk3.s:5752   .debug_str:0000000000000021 .LASF138
     /tmp/ccuwPHk3.s:5872   .debug_str:00000000000003e0 .LASF139
     /tmp/ccuwPHk3.s:5980   .debug_str:0000000000000737 .LASF140
     /tmp/ccuwPHk3.s:6202   .debug_str:0000000000000e9f .LASF141
     /tmp/ccuwPHk3.s:6048   .debug_str:0000000000000952 .LASF142
     /tmp/ccuwPHk3.s:5950   .debug_str:0000000000000633 .LASF143
     /tmp/ccuwPHk3.s:6306   .debug_str:00000000000011d8 .LASF144
     /tmp/ccuwPHk3.s:6286   .debug_str:0000000000001139 .LASF145
     /tmp/ccuwPHk3.s:6126   .debug_str:0000000000000bae .LASF146
     /tmp/ccuwPHk3.s:6174   .debug_str:0000000000000cf2 .LASF147
     /tmp/ccuwPHk3.s:6062   .debug_str:00000000000009d3 .LASF148
     /tmp/ccuwPHk3.s:6008   .debug_str:0000000000000829 .LASF149
     /tmp/ccuwPHk3.s:5938   .debug_str:00000000000005e4 .LASF150
     /tmp/ccuwPHk3.s:6252   .debug_str:0000000000000ff6 .LASF151
     /tmp/ccuwPHk3.s:6140   .debug_str:0000000000000c20 .LASF152
     /tmp/ccuwPHk3.s:5832   .debug_str:000000000000028b .LASF153
     /tmp/ccuwPHk3.s:6078   .debug_str:0000000000000a3d .LASF154
     /tmp/ccuwPHk3.s:6114   .debug_str:0000000000000b36 .LASF155
     /tmp/ccuwPHk3.s:6234   .debug_str:0000000000000f98 .LASF156
     /tmp/ccuwPHk3.s:6262   .debug_str:0000000000001045 .LASF157
     /tmp/ccuwPHk3.s:6108   .debug_str:0000000000000b15 .LASF162
     /tmp/ccuwPHk3.s:6090   .debug_str:0000000000000aa3 .LASF158
     /tmp/ccuwPHk3.s:6222   .debug_str:0000000000000f37 .LASF160
     /tmp/ccuwPHk3.s:5826   .debug_str:000000000000025c .LASF161
     /tmp/ccuwPHk3.s:6132   .debug_str:0000000000000bd3 .LASF163
     /tmp/ccuwPHk3.s:6254   .debug_str:0000000000001011 .LASF214
     /tmp/ccuwPHk3.s:6088   .debug_str:0000000000000a9e .LASF164
     /tmp/ccuwPHk3.s:5794   .debug_str:0000000000000154 .LASF165
     /tmp/ccuwPHk3.s:6092   .debug_str:0000000000000aa8 .LASF166
     /tmp/ccuwPHk3.s:6230   .debug_str:0000000000000f6d .LASF167
     /tmp/ccuwPHk3.s:5844   .debug_str:00000000000002e3 .LASF168
     /tmp/ccuwPHk3.s:6134   .debug_str:0000000000000be8 .LASF169
     /tmp/ccuwPHk3.s:6156   .debug_str:0000000000000c65 .LASF170
     /tmp/ccuwPHk3.s:6064   .debug_str:00000000000009dc .LASF171
     /tmp/ccuwPHk3.s:5782   .debug_str:0000000000000106 .LASF172
     /tmp/ccuwPHk3.s:5808   .debug_str:00000000000001c2 .LASF173
     /tmp/ccuwPHk3.s:6034   .debug_str:000000000000090a .LASF174
     /tmp/ccuwPHk3.s:5946   .debug_str:0000000000000619 .LASF175
     /tmp/ccuwPHk3.s:5920   .debug_str:0000000000000561 .LASF176
     /tmp/ccuwPHk3.s:5856   .debug_str:000000000000034e .LASF177
     /tmp/ccuwPHk3.s:5928   .debug_str:00000000000005aa .LASF178
     /tmp/ccuwPHk3.s:6070   .debug_str:00000000000009fc .LASF179
     /tmp/ccuwPHk3.s:6290   .debug_str:000000000000116a .LASF180
     /tmp/ccuwPHk3.s:5828   .debug_str:0000000000000265 .LASF181
     /tmp/ccuwPHk3.s:5760   .debug_str:0000000000000060 .LASF182
     /tmp/ccuwPHk3.s:5772   .debug_str:00000000000000c9 .LASF183
     /tmp/ccuwPHk3.s:6198   .debug_str:0000000000000e87 .LASF184
GAS LISTING /tmp/ccuwPHk3.s 			page 47


     /tmp/ccuwPHk3.s:6044   .debug_str:0000000000000935 .LASF185
     /tmp/ccuwPHk3.s:6206   .debug_str:0000000000000ed2 .LASF186
     /tmp/ccuwPHk3.s:5978   .debug_str:000000000000072a .LASF187
     /tmp/ccuwPHk3.s:6276   .debug_str:00000000000010c1 .LASF188
     /tmp/ccuwPHk3.s:5796   .debug_str:0000000000000160 .LASF189
     /tmp/ccuwPHk3.s:6036   .debug_str:0000000000000912 .LASF190
     /tmp/ccuwPHk3.s:5810   .debug_str:00000000000001d6 .LASF191
     /tmp/ccuwPHk3.s:5750   .debug_str:0000000000000000 .LASF192
     /tmp/ccuwPHk3.s:5762   .debug_str:0000000000000068 .LASF274
     /tmp/ccuwPHk3.s:5854   .debug_str:0000000000000332 .LASF193
     /tmp/ccuwPHk3.s:5954   .debug_str:0000000000000674 .LASF194
     /tmp/ccuwPHk3.s:5838   .debug_str:00000000000002be .LASF275
     /tmp/ccuwPHk3.s:5868   .debug_str:00000000000003bb .LASF276
     /tmp/ccuwPHk3.s:6280   .debug_str:00000000000010de .LASF195
     /tmp/ccuwPHk3.s:5754   .debug_str:0000000000000027 .LASF196
     /tmp/ccuwPHk3.s:5846   .debug_str:00000000000002e8 .LASF197
     /tmp/ccuwPHk3.s:6274   .debug_str:0000000000001099 .LASF198
     /tmp/ccuwPHk3.s:6238   .debug_str:0000000000000fb7 .LASF199
     /tmp/ccuwPHk3.s:6054   .debug_str:0000000000000980 .LASF200
     /tmp/ccuwPHk3.s:6214   .debug_str:0000000000000f17 .LASF201
     /tmp/ccuwPHk3.s:6124   .debug_str:0000000000000b83 .LASF202
     /tmp/ccuwPHk3.s:5892   .debug_str:0000000000000471 .LASF203
     /tmp/ccuwPHk3.s:6168   .debug_str:0000000000000cc2 .LASF204
     /tmp/ccuwPHk3.s:6210   .debug_str:0000000000000efa .LASF205
     /tmp/ccuwPHk3.s:5882   .debug_str:000000000000043f .LASF206
     /tmp/ccuwPHk3.s:5874   .debug_str:00000000000003f4 .LASF207
     /tmp/ccuwPHk3.s:5996   .debug_str:00000000000007b7 .LASF208
     /tmp/ccuwPHk3.s:5966   .debug_str:00000000000006df .LASF209
     /tmp/ccuwPHk3.s:6010   .debug_str:0000000000000845 .LASF210
     /tmp/ccuwPHk3.s:6086   .debug_str:0000000000000a87 .LASF211
     /tmp/ccuwPHk3.s:6050   .debug_str:000000000000095e .LASF212
     /tmp/ccuwPHk3.s:6012   .debug_str:000000000000084f .LASF213
     /tmp/ccuwPHk3.s:5994   .debug_str:000000000000079e .LASF215
     /tmp/ccuwPHk3.s:6074   .debug_str:0000000000000a1d .LASF277
     /tmp/ccuwPHk3.s:6216   .debug_str:0000000000000f22 .LASF216
     /tmp/ccuwPHk3.s:5806   .debug_str:00000000000001a6 .LASF217
     /tmp/ccuwPHk3.s:6022   .debug_str:000000000000089c .LASF218
     /tmp/ccuwPHk3.s:6182   .debug_str:0000000000000dee .LASF219
     /tmp/ccuwPHk3.s:6170   .debug_str:0000000000000cc7 .LASF220
     /tmp/ccuwPHk3.s:5776   .debug_str:00000000000000e4 .LASF221
     /tmp/ccuwPHk3.s:5894   .debug_str:0000000000000477 .LASF222
     /tmp/ccuwPHk3.s:6146   .debug_str:0000000000000c33 .LASF223
     /tmp/ccuwPHk3.s:5786   .debug_str:0000000000000125 .LASF224
     /tmp/ccuwPHk3.s:6302   .debug_str:00000000000011bb .LASF225
     /tmp/ccuwPHk3.s:6038   .debug_str:000000000000091d .LASF226
     /tmp/ccuwPHk3.s:6282   .debug_str:0000000000001105 .LASF227
     /tmp/ccuwPHk3.s:6172   .debug_str:0000000000000cde .LASF228
     /tmp/ccuwPHk3.s:6196   .debug_str:0000000000000e62 .LASF229
     /tmp/ccuwPHk3.s:5974   .debug_str:0000000000000714 .LASF230
     /tmp/ccuwPHk3.s:6284   .debug_str:000000000000111a .LASF231
     /tmp/ccuwPHk3.s:6256   .debug_str:0000000000001021 .LASF232
     /tmp/ccuwPHk3.s:5784   .debug_str:0000000000000110 .LASF233
     /tmp/ccuwPHk3.s:5910   .debug_str:000000000000051d .LASF234
     /tmp/ccuwPHk3.s:5858   .debug_str:000000000000035f .LASF235
     /tmp/ccuwPHk3.s:6260   .debug_str:0000000000001038 .LASF236
     /tmp/ccuwPHk3.s:5898   .debug_str:00000000000004ad .LASF237
     /tmp/ccuwPHk3.s:6194   .debug_str:0000000000000e5b .LASF238
GAS LISTING /tmp/ccuwPHk3.s 			page 48


     /tmp/ccuwPHk3.s:6154   .debug_str:0000000000000c5d .LASF239
     /tmp/ccuwPHk3.s:6178   .debug_str:0000000000000d18 .LASF240
     /tmp/ccuwPHk3.s:155    .text:00000000000000c0 .LFB92
     /tmp/ccuwPHk3.s:1205   .text:00000000000004a8 .LFE92
     /tmp/ccuwPHk3.s:6142   .debug_str:0000000000000c27 .LASF241
     /tmp/ccuwPHk3.s:5364   .debug_loc:0000000000000000 .LLST2
     /tmp/ccuwPHk3.s:5734   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccuwPHk3.s:6184   .debug_str:0000000000000e05 .LASF242
     /tmp/ccuwPHk3.s:5912   .debug_str:000000000000052b .LASF243
     /tmp/ccuwPHk3.s:5864   .debug_str:000000000000039b .LASF244
     /tmp/ccuwPHk3.s:5387   .debug_loc:000000000000006f .LLST13
     /tmp/ccuwPHk3.s:5394   .debug_loc:0000000000000092 .LLST14
     /tmp/ccuwPHk3.s:5401   .debug_loc:00000000000000b5 .LLST15
     /tmp/ccuwPHk3.s:5456   .debug_loc:00000000000001ad .LLST16
     /tmp/ccuwPHk3.s:5479   .debug_loc:000000000000021c .LLST17
     /tmp/ccuwPHk3.s:5490   .debug_loc:0000000000000252 .LLST18
     /tmp/ccuwPHk3.s:5812   .debug_str:00000000000001ff .LASF245
     /tmp/ccuwPHk3.s:5497   .debug_loc:0000000000000275 .LLST19
     /tmp/ccuwPHk3.s:5504   .debug_loc:0000000000000298 .LLST20
     /tmp/ccuwPHk3.s:5960   .debug_str:00000000000006b9 .LASF246
     /tmp/ccuwPHk3.s:5511   .debug_loc:00000000000002bb .LLST21
     /tmp/ccuwPHk3.s:5518   .debug_loc:00000000000002de .LLST22
     /tmp/ccuwPHk3.s:6006   .debug_str:000000000000081d .LASF247
     /tmp/ccuwPHk3.s:5525   .debug_loc:0000000000000301 .LLST23
     /tmp/ccuwPHk3.s:5902   .debug_str:00000000000004d7 .LASF248
     /tmp/ccuwPHk3.s:5532   .debug_loc:0000000000000324 .LLST24
     /tmp/ccuwPHk3.s:5539   .debug_loc:0000000000000347 .LLST25
     /tmp/ccuwPHk3.s:6094   .debug_str:0000000000000ab1 .LASF249
     /tmp/ccuwPHk3.s:5546   .debug_loc:000000000000036a .LLST26
     /tmp/ccuwPHk3.s:5948   .debug_str:000000000000062b .LASF250
     /tmp/ccuwPHk3.s:5553   .debug_loc:000000000000038d .LLST27
     /tmp/ccuwPHk3.s:5560   .debug_loc:00000000000003b0 .LLST28
     /tmp/ccuwPHk3.s:585    .text:0000000000000244 .LBB107
     /tmp/ccuwPHk3.s:601    .text:0000000000000260 .LBE107
     /tmp/ccuwPHk3.s:598    .text:0000000000000260 .LVL38
     /tmp/ccuwPHk3.s:652    .text:0000000000000294 .LBB109
     /tmp/ccuwPHk3.s:675    .text:00000000000002b0 .LBE109
     /tmp/ccuwPHk3.s:5567   .debug_loc:00000000000003d3 .LLST29
     /tmp/ccuwPHk3.s:5574   .debug_loc:00000000000003f6 .LLST30
     /tmp/ccuwPHk3.s:5581   .debug_loc:0000000000000419 .LLST31
     /tmp/ccuwPHk3.s:661    .text:00000000000002a0 .LBB111
     /tmp/ccuwPHk3.s:670    .text:00000000000002ac .LBE111
     /tmp/ccuwPHk3.s:5588   .debug_loc:000000000000043c .LLST32
     /tmp/ccuwPHk3.s:426    .text:00000000000001d4 .LVL22
     /tmp/ccuwPHk3.s:515    .text:0000000000000214 .LVL30
     /tmp/ccuwPHk3.s:566    .text:0000000000000238 .LVL36
     /tmp/ccuwPHk3.s:623    .text:0000000000000278 .LVL40
     /tmp/ccuwPHk3.s:651    .text:0000000000000294 .LVL44
     /tmp/ccuwPHk3.s:723    .text:00000000000002e4 .LVL54
     /tmp/ccuwPHk3.s:726    .text:00000000000002f0 .LVL55
     /tmp/ccuwPHk3.s:765    .text:0000000000000314 .LVL60
     /tmp/ccuwPHk3.s:794    .text:000000000000032c .LVL63
     /tmp/ccuwPHk3.s:830    .text:0000000000000348 .LVL67
     /tmp/ccuwPHk3.s:859    .text:0000000000000360 .LVL70
     /tmp/ccuwPHk3.s:889    .text:0000000000000378 .LVL73
     /tmp/ccuwPHk3.s:910    .text:000000000000038c .LVL75
     /tmp/ccuwPHk3.s:946    .text:00000000000003b0 .LVL79
GAS LISTING /tmp/ccuwPHk3.s 			page 49


     /tmp/ccuwPHk3.s:276    .text:000000000000017c .LBB101
     /tmp/ccuwPHk3.s:291    .text:0000000000000188 .LBE101
     /tmp/ccuwPHk3.s:297    .text:0000000000000190 .LBB103
     /tmp/ccuwPHk3.s:312    .text:000000000000019c .LBE103
     /tmp/ccuwPHk3.s:448    .text:00000000000001e0 .LBB114
     /tmp/ccuwPHk3.s:459    .text:00000000000001e4 .LBE114
     /tmp/ccuwPHk3.s:5597   .debug_loc:0000000000000461 .LLST33
     /tmp/ccuwPHk3.s:464    .text:00000000000001e8 .LBB116
     /tmp/ccuwPHk3.s:476    .text:00000000000001ec .LBE116
     /tmp/ccuwPHk3.s:5604   .debug_loc:0000000000000484 .LLST34
     /tmp/ccuwPHk3.s:954    .text:00000000000003b4 .LBB83
     /tmp/ccuwPHk3.s:1080   .text:0000000000000430 .LBE83
     /tmp/ccuwPHk3.s:6218   .debug_str:0000000000000f29 .LASF251
     /tmp/ccuwPHk3.s:5611   .debug_loc:00000000000004a7 .LLST8
     /tmp/ccuwPHk3.s:1000   .text:00000000000003f4 .LBB89
     /tmp/ccuwPHk3.s:1078   .text:0000000000000430 .LBE89
     /tmp/ccuwPHk3.s:1002   .text:00000000000003f4 .LBB90
     /tmp/ccuwPHk3.s:1017   .text:0000000000000400 .LBE90
     /tmp/ccuwPHk3.s:1021   .text:0000000000000404 .LBB92
     /tmp/ccuwPHk3.s:1036   .text:0000000000000410 .LBE92
     /tmp/ccuwPHk3.s:1047   .text:0000000000000420 .LBB94
     /tmp/ccuwPHk3.s:1058   .text:0000000000000424 .LBE94
     /tmp/ccuwPHk3.s:5618   .debug_loc:00000000000004ca .LLST11
     /tmp/ccuwPHk3.s:1063   .text:0000000000000428 .LBB96
     /tmp/ccuwPHk3.s:1077   .text:0000000000000430 .LBE96
     /tmp/ccuwPHk3.s:5625   .debug_loc:00000000000004ed .LLST12
     /tmp/ccuwPHk3.s:1042   .text:000000000000041c .LVL86
     /tmp/ccuwPHk3.s:957    .text:00000000000003b4 .LBB84
     /tmp/ccuwPHk3.s:969    .text:00000000000003bc .LBE84
     /tmp/ccuwPHk3.s:5632   .debug_loc:0000000000000510 .LLST9
     /tmp/ccuwPHk3.s:989    .text:00000000000003ec .LBB86
     /tmp/ccuwPHk3.s:996    .text:00000000000003f0 .LBE86
     /tmp/ccuwPHk3.s:5640   .debug_loc:0000000000000534 .LLST10
     /tmp/ccuwPHk3.s:973    .text:00000000000003c4 .LVL82
     /tmp/ccuwPHk3.s:977    .text:00000000000003cc .LVL83
     /tmp/ccuwPHk3.s:1082   .text:0000000000000430 .LBB70
     /tmp/ccuwPHk3.s:1200   .text:00000000000004a8 .LBE70
     /tmp/ccuwPHk3.s:1165   .text:0000000000000470 .LBB76
     /tmp/ccuwPHk3.s:1198   .text:00000000000004a8 .LBE76
     /tmp/ccuwPHk3.s:6240   .debug_str:0000000000000fc3 .LASF252
     /tmp/ccuwPHk3.s:5647   .debug_loc:0000000000000557 .LLST4
     /tmp/ccuwPHk3.s:1180   .text:0000000000000488 .LBB77
     /tmp/ccuwPHk3.s:1195   .text:00000000000004a4 .LBE77
     /tmp/ccuwPHk3.s:5658   .debug_loc:000000000000058d .LLST5
     /tmp/ccuwPHk3.s:1190   .text:00000000000004a0 .LVL102
     /tmp/ccuwPHk3.s:1084   .text:0000000000000430 .LBB71
     /tmp/ccuwPHk3.s:1100   .text:000000000000043c .LBE71
     /tmp/ccuwPHk3.s:1102   .text:000000000000043c .LBB73
     /tmp/ccuwPHk3.s:1118   .text:0000000000000448 .LBE73
     /tmp/ccuwPHk3.s:1136   .text:0000000000000464 .LBB78
     /tmp/ccuwPHk3.s:1147   .text:0000000000000468 .LBE78
     /tmp/ccuwPHk3.s:5666   .debug_loc:00000000000005b1 .LLST6
     /tmp/ccuwPHk3.s:1149   .text:0000000000000468 .LBB80
     /tmp/ccuwPHk3.s:1163   .text:0000000000000470 .LBE80
     /tmp/ccuwPHk3.s:5673   .debug_loc:00000000000005d4 .LLST7
     /tmp/ccuwPHk3.s:1123   .text:0000000000000450 .LVL93
     /tmp/ccuwPHk3.s:1134   .text:0000000000000464 .LVL95
GAS LISTING /tmp/ccuwPHk3.s 			page 50


     /tmp/ccuwPHk3.s:216    .text:0000000000000114 .LBB67
     /tmp/ccuwPHk3.s:265    .text:0000000000000178 .LBE67
     /tmp/ccuwPHk3.s:5680   .debug_loc:00000000000005f7 .LLST3
     /tmp/ccuwPHk3.s:218    .text:0000000000000114 .LBB68
     /tmp/ccuwPHk3.s:234    .text:0000000000000120 .LBE68
     /tmp/ccuwPHk3.s:239    .text:0000000000000130 .LVL12
     /tmp/ccuwPHk3.s:244    .text:000000000000013c .LVL13
     /tmp/ccuwPHk3.s:249    .text:000000000000014c .LVL14
     /tmp/ccuwPHk3.s:254    .text:000000000000015c .LVL15
     /tmp/ccuwPHk3.s:259    .text:0000000000000168 .LVL16
     /tmp/ccuwPHk3.s:264    .text:0000000000000178 .LVL17
     /tmp/ccuwPHk3.s:173    .text:00000000000000dc .LBB62
     /tmp/ccuwPHk3.s:190    .text:00000000000000e8 .LBE62
     /tmp/ccuwPHk3.s:109    .text:00000000000000a0 .LFB91
     /tmp/ccuwPHk3.s:138    .text:00000000000000c0 .LFE91
     /tmp/ccuwPHk3.s:5790   .debug_str:000000000000012f .LASF278
     /tmp/ccuwPHk3.s:9      .text:0000000000000000 .LFB90
     /tmp/ccuwPHk3.s:103    .text:00000000000000a0 .LFE90
     /tmp/ccuwPHk3.s:6226   .debug_str:0000000000000f4c .LASF253
     /tmp/ccuwPHk3.s:5687   .debug_loc:000000000000061a .LLST0
     /tmp/ccuwPHk3.s:54     .text:0000000000000048 .LBB61
     /tmp/ccuwPHk3.s:86     .text:0000000000000088 .LBE61
     /tmp/ccuwPHk3.s:5788   .debug_str:000000000000012a .LASF254
     /tmp/ccuwPHk3.s:5710   .debug_loc:0000000000000689 .LLST1
     /tmp/ccuwPHk3.s:62     .text:0000000000000058 .LVL4
     /tmp/ccuwPHk3.s:67     .text:0000000000000064 .LVL5
     /tmp/ccuwPHk3.s:82     .text:0000000000000084 .LVL7
     /tmp/ccuwPHk3.s:5884   .debug_str:0000000000000446 .LASF255
     /tmp/ccuwPHk3.s:5836   .debug_str:00000000000002ae .LASF256
     /tmp/ccuwPHk3.s:6232   .debug_str:0000000000000f84 .LASF257
     /tmp/ccuwPHk3.s:5780   .debug_str:0000000000000101 .LASF258
     /tmp/ccuwPHk3.s:5982   .debug_str:000000000000073f .LASF259
     /tmp/ccuwPHk3.s:6130   .debug_str:0000000000000bc5 .LASF260
     /tmp/ccuwPHk3.s:6004   .debug_str:0000000000000806 .LASF261
     /tmp/ccuwPHk3.s:6224   .debug_str:0000000000000f3c .LASF262
     /tmp/ccuwPHk3.s:5918   .debug_str:000000000000054b .LASF263
     /tmp/ccuwPHk3.s:6072   .debug_str:0000000000000a0c .LASF264
     /tmp/ccuwPHk3.s:6242   .debug_str:0000000000000fca .LASF265
     /tmp/ccuwPHk3.s:188    .text:00000000000000e8 .LVL10
     /tmp/ccuwPHk3.s:439    .text:00000000000001dc .LVL23
     /tmp/ccuwPHk3.s:495    .text:0000000000000208 .LVL28
     /tmp/ccuwPHk3.s:642    .text:0000000000000284 .LVL42
     /tmp/ccuwPHk3.s:706    .text:00000000000002d0 .LVL52
     /tmp/ccuwPHk3.s:715    .text:00000000000002d4 .LVL53
     /tmp/ccuwPHk3.s:751    .text:0000000000000308 .LVL58
     /tmp/ccuwPHk3.s:1127   .text:0000000000000458 .LVL94
     /tmp/ccuwPHk3.s:1160   .text:0000000000000470 .LVL97
     /tmp/ccuwPHk3.s:1170   .text:000000000000047c .LVL98
     /tmp/ccuwPHk3.s:322    .text:00000000000001a4 .LVL19
     /tmp/ccuwPHk3.s:332    .text:00000000000001b0 .LVL20
     /tmp/ccuwPHk3.s:530    .text:0000000000000220 .LVL31
     /tmp/ccuwPHk3.s:581    .text:0000000000000244 .LVL37
     /tmp/ccuwPHk3.s:617    .text:0000000000000270 .LVL39
     /tmp/ccuwPHk3.s:682    .text:00000000000002b8 .LVL49
     /tmp/ccuwPHk3.s:685    .text:00000000000002bc .LVL50
     /tmp/ccuwPHk3.s:701    .text:00000000000002c8 .LVL51
     /tmp/ccuwPHk3.s:730    .text:00000000000002f4 .LVL56
GAS LISTING /tmp/ccuwPHk3.s 			page 51


     /tmp/ccuwPHk3.s:746    .text:0000000000000300 .LVL57
     /tmp/ccuwPHk3.s:780    .text:0000000000000320 .LVL61
     /tmp/ccuwPHk3.s:809    .text:0000000000000338 .LVL64
     /tmp/ccuwPHk3.s:845    .text:0000000000000354 .LVL68
     /tmp/ccuwPHk3.s:874    .text:000000000000036c .LVL71
     /tmp/ccuwPHk3.s:904    .text:0000000000000384 .LVL74
     /tmp/ccuwPHk3.s:760    .text:000000000000030c .LVL59
     /tmp/ccuwPHk3.s:789    .text:0000000000000324 .LVL62
     /tmp/ccuwPHk3.s:819    .text:000000000000033c .LVL65
     /tmp/ccuwPHk3.s:854    .text:0000000000000358 .LVL69
     /tmp/ccuwPHk3.s:931    .text:00000000000003a0 .LVL77
     /tmp/ccuwPHk3.s:940    .text:00000000000003a4 .LVL78
     /tmp/ccuwPHk3.s:421    .text:00000000000001cc .LVL21
     /tmp/ccuwPHk3.s:510    .text:000000000000020c .LVL29
     /tmp/ccuwPHk3.s:543    .text:0000000000000224 .LVL32
     /tmp/ccuwPHk3.s:549    .text:0000000000000228 .LVL33
     /tmp/ccuwPHk3.s:555    .text:000000000000022c .LVL34
     /tmp/ccuwPHk3.s:561    .text:0000000000000230 .LVL35
     /tmp/ccuwPHk3.s:636    .text:0000000000000280 .LVL41
     /tmp/ccuwPHk3.s:645    .text:0000000000000288 .LVL43
     /tmp/ccuwPHk3.s:657    .text:0000000000000298 .LVL45
     /tmp/ccuwPHk3.s:673    .text:00000000000002b0 .LVL48
     /tmp/ccuwPHk3.s:825    .text:0000000000000340 .LVL66
     /tmp/ccuwPHk3.s:884    .text:0000000000000370 .LVL72
     /tmp/ccuwPHk3.s:660    .text:00000000000002a0 .LVL46
     /tmp/ccuwPHk3.s:668    .text:00000000000002ac .LVL47
     /tmp/ccuwPHk3.s:447    .text:00000000000001e0 .LVL24
     /tmp/ccuwPHk3.s:456    .text:00000000000001e4 .LVL25
     /tmp/ccuwPHk3.s:463    .text:00000000000001e8 .LVL26
     /tmp/ccuwPHk3.s:472    .text:00000000000001ec .LVL27
     /tmp/ccuwPHk3.s:994    .text:00000000000003f0 .LVL85
     /tmp/ccuwPHk3.s:1046   .text:0000000000000420 .LVL87
     /tmp/ccuwPHk3.s:1055   .text:0000000000000424 .LVL88
     /tmp/ccuwPHk3.s:1062   .text:0000000000000428 .LVL89
     /tmp/ccuwPHk3.s:1074   .text:0000000000000430 .LVL90
     /tmp/ccuwPHk3.s:956    .text:00000000000003b4 .LVL80
     /tmp/ccuwPHk3.s:966    .text:00000000000003bc .LVL81
     /tmp/ccuwPHk3.s:988    .text:00000000000003ec .LVL84
     /tmp/ccuwPHk3.s:1173   .text:0000000000000480 .LVL99
     /tmp/ccuwPHk3.s:1178   .text:0000000000000484 .LVL100
     /tmp/ccuwPHk3.s:1194   .text:00000000000004a4 .LVL103
     /tmp/ccuwPHk3.s:1185   .text:0000000000000494 .LVL101
     /tmp/ccuwPHk3.s:1144   .text:0000000000000468 .LVL96
     /tmp/ccuwPHk3.s:232    .text:0000000000000120 .LVL11
     /tmp/ccuwPHk3.s:271    .text:000000000000017c .LVL18
     /tmp/ccuwPHk3.s:29     .text:0000000000000024 .LVL0
     /tmp/ccuwPHk3.s:39     .text:0000000000000038 .LVL1
     /tmp/ccuwPHk3.s:43     .text:000000000000003c .LVL2
     /tmp/ccuwPHk3.s:75     .text:0000000000000074 .LVL6
     /tmp/ccuwPHk3.s:84     .text:0000000000000088 .LVL8
     /tmp/ccuwPHk3.s:96     .text:0000000000000094 .LVL9
     /tmp/ccuwPHk3.s:56     .text:0000000000000048 .LVL3
     /tmp/ccuwPHk3.s:1218   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccuwPHk3.s:274    .text:000000000000017c .LBB100
     /tmp/ccuwPHk3.s:477    .text:00000000000001ec .LBE100
     /tmp/ccuwPHk3.s:499    .text:0000000000000208 .LBB119
     /tmp/ccuwPHk3.s:952    .text:00000000000003b4 .LBE119
GAS LISTING /tmp/ccuwPHk3.s 			page 52


     /tmp/ccuwPHk3.s:412    .text:00000000000001c8 .LBB106
     /tmp/ccuwPHk3.s:442    .text:00000000000001dc .LBE106
     /tmp/ccuwPHk3.s:501    .text:0000000000000208 .LBB113
     /tmp/ccuwPHk3.s:950    .text:00000000000003b4 .LBE113

UNDEFINED SYMBOLS
_ZN3sem16timeBlockedQueueE
_ZN3TCB10setBlockedEb
_ZN9Scheduler3putEP3TCB
_ZdlPv
_Z15printStringTrapPKc
_Z16printIntegerTrapm
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN3TCB12createThreadEPPS_PFvPvES2_S2_
_ZN3TCB7runningE
_ZN3TCB8dispatchEv
_ZN3semnwEm
_ZN3semD1Ev
_ZN3semdlEPv
_ZN3sem4waitEv
_ZN3sem6signalEv
_ZN3sem9timedWaitEm
_ZN3sem7tryWaitEv
_ZN3TCB10putToSleepEm
_ZN9myConsole4getcEv
_ZN9myConsole4putcEc
_ZN3TCB21updateSleepingThreadsEv
_ZN3TCB16timeSliceCounterE
plic_claim
plic_complete
CONSOLE_STATUS
CONSOLE_RX_DATA
_ZN9myConsole19recieveFromKeyboardEc
